BufferedInputStream~java.io.BufferedInputStream~java/io/BufferedInputStream.html~A BufferedInputStream adds functionality to another input stream-namely, the ability to buffer the input and to support the mark and reset methods.
BufferedOutputStream~java.io.BufferedOutputStream~java/io/BufferedOutputStream.html~The class implements a buffered output stream.
BufferedReader~java.io.BufferedReader~java/io/BufferedReader.html~Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines.
BufferedWriter~java.io.BufferedWriter~java/io/BufferedWriter.html~Writes text to a character-output stream, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings.
ByteArrayInputStream~java.io.ByteArrayInputStream~java/io/ByteArrayInputStream.html~A ByteArrayInputStream contains an internal buffer that contains bytes that may be read from the stream.
ByteArrayOutputStream~java.io.ByteArrayOutputStream~java/io/ByteArrayOutputStream.html~This class implements an output stream in which the data is written into a byte array.
CharArrayReader~java.io.CharArrayReader~java/io/CharArrayReader.html~This class implements a character buffer that can be used as a character-input stream.
CharArrayWriter~java.io.CharArrayWriter~java/io/CharArrayWriter.html~This class implements a character buffer that can be used as an Writer.
Console~java.io.Console~java/io/Console.html~Methods to access the character-based console device, if any, associated with the current Java virtual machine.
DataInputStream~java.io.DataInputStream~java/io/DataInputStream.html~A data input stream lets an application read primitive Java data types from an underlying input stream in a machine-independent way.
DataOutputStream~java.io.DataOutputStream~java/io/DataOutputStream.html~A data output stream lets an application write primitive Java data types to an output stream in a portable way.
File~java.io.File~java/io/File.html~An abstract representation of file and directory pathnames.
FileDescriptor~java.io.FileDescriptor~java/io/FileDescriptor.html~Instances of the file descriptor class serve as an opaque handle to the underlying machine-specific structure representing an open file, an open socket, or another source or sink of bytes.
FileInputStream~java.io.FileInputStream~java/io/FileInputStream.html~A FileInputStream obtains input bytes from a file in a file system.
FileOutputStream~java.io.FileOutputStream~java/io/FileOutputStream.html~A file output stream is an output stream for writing data to a File or to a FileDescriptor.
FilePermission~java.io.FilePermission~java/io/FilePermission.html~This class represents access to a file or directory.
FileReader~java.io.FileReader~java/io/FileReader.html~Convenience class for reading character files.
FileWriter~java.io.FileWriter~java/io/FileWriter.html~Convenience class for writing character files.
FilterInputStream~java.io.FilterInputStream~java/io/FilterInputStream.html~A FilterInputStream contains some other input stream, which it uses as its  basic source of data, possibly transforming the data along the way or providing  additional functionality.
FilterOutputStream~java.io.FilterOutputStream~java/io/FilterOutputStream.html~This class is the superclass of all classes that filter output streams.
FilterReader~java.io.FilterReader~java/io/FilterReader.html~Abstract class for reading filtered character streams.
FilterWriter~java.io.FilterWriter~java/io/FilterWriter.html~Abstract class for writing filtered character streams.
InputStream~java.io.InputStream~java/io/InputStream.html~This abstract class is the superclass of all classes representing an input stream of bytes.
InputStreamReader~java.io.InputStreamReader~java/io/InputStreamReader.html~An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified charset.
LineNumberInputStream~java.io.LineNumberInputStream~java/io/LineNumberInputStream.html~Deprecated This class incorrectly assumes that bytes adequately represent characters.
LineNumberReader~java.io.LineNumberReader~java/io/LineNumberReader.html~A buffered character-input stream that keeps track of line numbers.
ObjectInputStream~java.io.ObjectInputStream~java/io/ObjectInputStream.html~An ObjectInputStream deserializes primitive data and objects previously written using an ObjectOutputStream.
ObjectInputStream.GetField~java.io.ObjectInputStream.GetField~java/io/ObjectInputStream.GetField.html~Provide access to the persistent fields read from the input stream.
ObjectOutputStream~java.io.ObjectOutputStream~java/io/ObjectOutputStream.html~An ObjectOutputStream writes primitive data types and graphs of Java objects to an OutputStream.
ObjectOutputStream.PutField~java.io.ObjectOutputStream.PutField~java/io/ObjectOutputStream.PutField.html~Provide programmatic access to the persistent fields to be written to ObjectOutput.
ObjectStreamClass~java.io.ObjectStreamClass~java/io/ObjectStreamClass.html~Serialization's descriptor for classes.
ObjectStreamField~java.io.ObjectStreamField~java/io/ObjectStreamField.html~A description of a Serializable field from a Serializable class.
OutputStream~java.io.OutputStream~java/io/OutputStream.html~This abstract class is the superclass of all classes representing an output stream of bytes.
OutputStreamWriter~java.io.OutputStreamWriter~java/io/OutputStreamWriter.html~An OutputStreamWriter is a bridge from character streams to byte streams: Characters written to it are encoded into bytes using a specified charset.
PipedInputStream~java.io.PipedInputStream~java/io/PipedInputStream.html~A piped input stream should be connected to a piped output stream; the piped  input stream then provides whatever data bytes are written to the piped output  stream.
PipedOutputStream~java.io.PipedOutputStream~java/io/PipedOutputStream.html~A piped output stream can be connected to a piped input stream to create a communications pipe.
PipedReader~java.io.PipedReader~java/io/PipedReader.html~Piped character-input streams.
PipedWriter~java.io.PipedWriter~java/io/PipedWriter.html~Piped character-output streams.
PrintStream~java.io.PrintStream~java/io/PrintStream.html~A PrintStream adds functionality to another output stream, namely the ability to print representations of various data values conveniently.
PrintWriter~java.io.PrintWriter~java/io/PrintWriter.html~Prints formatted representations of objects to a text-output stream.
PushbackInputStream~java.io.PushbackInputStream~java/io/PushbackInputStream.html~A PushbackInputStream adds functionality to another input stream, namely the  ability to "push back" or "unread" one byte.
PushbackReader~java.io.PushbackReader~java/io/PushbackReader.html~A character-stream reader that allows characters to be pushed back into the stream.
RandomAccessFile~java.io.RandomAccessFile~java/io/RandomAccessFile.html~Instances of this class support both reading and writing to a random access file.
Reader~java.io.Reader~java/io/Reader.html~Abstract class for reading character streams.
SequenceInputStream~java.io.SequenceInputStream~java/io/SequenceInputStream.html~A SequenceInputStream represents the logical concatenation of other input streams.
SerializablePermission~java.io.SerializablePermission~java/io/SerializablePermission.html~This class is for Serializable permissions.
StreamTokenizer~java.io.StreamTokenizer~java/io/StreamTokenizer.html~The StreamTokenizer class takes an input stream and parses it into "tokens", allowing the tokens to be read one at a time.
StringBufferInputStream~java.io.StringBufferInputStream~java/io/StringBufferInputStream.html~Deprecated This class does not properly convert characters into bytes.
StringReader~java.io.StringReader~java/io/StringReader.html~A character stream whose source is a string.
StringWriter~java.io.StringWriter~java/io/StringWriter.html~A character stream that collects its output in a string buffer, which can then be used to construct a string.
Writer~java.io.Writer~java/io/Writer.html~Abstract class for writing to character streams.
Boolean~java.lang.Boolean~java/lang/Boolean.html~The Boolean class wraps a value of the primitive type boolean in an object.
Byte~java.lang.Byte~java/lang/Byte.html~The Byte class wraps a value of primitive type byte in an object.
Character~java.lang.Character~java/lang/Character.html~The Character class wraps a value of the primitive type char in an object.
Character.Subset~java.lang.Character.Subset~java/lang/Character.Subset.html~Instances of this class represent particular subsets of the Unicode character set.
Character.UnicodeBlock~java.lang.Character.UnicodeBlock~java/lang/Character.UnicodeBlock.html~A family of character subsets representing the character blocks in the Unicode specification.
Class~java.lang.Class~java/lang/Class.html~Instances of the class Class represent classes and interfaces in a running Java application.
ClassLoader~java.lang.ClassLoader~java/lang/ClassLoader.html~A class loader is an object that is responsible for loading classes.
ClassValue~java.lang.ClassValue~java/lang/ClassValue.html~Lazily associate a computed value with (potentially) every type.
Compiler~java.lang.Compiler~java/lang/Compiler.html~The Compiler class is provided to support Java-to-native-code compilers and related services.
Double~java.lang.Double~java/lang/Double.html~The Double class wraps a value of the primitive type double in an object.
Enum~java.lang.Enum~java/lang/Enum.html~This is the common base class of all Java language enumeration types.
Float~java.lang.Float~java/lang/Float.html~The Float class wraps a value of primitive type float in an object.
InheritableThreadLocal~java.lang.InheritableThreadLocal~java/lang/InheritableThreadLocal.html~This class extends ThreadLocal to provide inheritance of values from parent thread to child thread: when a child thread is created, the child receives initial values for all inheritable thread-local variables for which the parent has values.
Integer~java.lang.Integer~java/lang/Integer.html~The Integer class wraps a value of the primitive type int in an object.
Long~java.lang.Long~java/lang/Long.html~The Long class wraps a value of the primitive type long in an object.
Math~java.lang.Math~java/lang/Math.html~The class Math contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions.
Number~java.lang.Number~java/lang/Number.html~The abstract class Number is the superclass of platform classes representing numeric values that are convertible to the primitive types byte, double, float, int, long, and short.
Object~java.lang.Object~java/lang/Object.html~Class Object is the root of the class hierarchy.
Package~java.lang.Package~java/lang/Package.html~Package objects contain version information about the implementation and specification of a Java package.
Process~java.lang.Process~java/lang/Process.html~The ProcessBuilder.start() and Runtime.exec methods create a native process and return an instance of a subclass of Process that can be used to control the process and obtain information about it.
ProcessBuilder~java.lang.ProcessBuilder~java/lang/ProcessBuilder.html~This class is used to create operating system processes.
ProcessBuilder.Redirect~java.lang.ProcessBuilder.Redirect~java/lang/ProcessBuilder.Redirect.html~Represents a source of subprocess input or a destination of subprocess output.
Runtime~java.lang.Runtime~java/lang/Runtime.html~Every Java application has a single instance of class Runtime that allows the application to interface with the environment in which the application is running.
RuntimePermission~java.lang.RuntimePermission~java/lang/RuntimePermission.html~This class is for runtime permissions.
SecurityManager~java.lang.SecurityManager~java/lang/SecurityManager.html~The security manager is a class that allows applications to implement a security policy.
Short~java.lang.Short~java/lang/Short.html~The Short class wraps a value of primitive type short in an object.
StackTraceElement~java.lang.StackTraceElement~java/lang/StackTraceElement.html~An element in a stack trace, as returned by Throwable.getStackTrace().
StrictMath~java.lang.StrictMath~java/lang/StrictMath.html~The class StrictMath contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions.
String~java.lang.String~java/lang/String.html~The String class represents character strings.
StringBuffer~java.lang.StringBuffer~java/lang/StringBuffer.html~A thread-safe, mutable sequence of characters.
StringBuilder~java.lang.StringBuilder~java/lang/StringBuilder.html~A mutable sequence of characters.
System~java.lang.System~java/lang/System.html~The System class contains several useful class fields and methods.
Thread~java.lang.Thread~java/lang/Thread.html~A thread is a thread of execution in a program.
ThreadGroup~java.lang.ThreadGroup~java/lang/ThreadGroup.html~A thread group represents a set of threads.
ThreadLocal~java.lang.ThreadLocal~java/lang/ThreadLocal.html~This class provides thread-local variables.
Throwable~java.lang.Throwable~java/lang/Throwable.html~The Throwable class is the superclass of all errors and exceptions in the Java language.
Void~java.lang.Void~java/lang/Void.html~The Void class is an uninstantiable placeholder class to hold a reference to the Class object representing the Java keyword void.
CallSite~java.lang.invoke.CallSite~java/lang/invoke/CallSite.html~A CallSite is a holder for a variable MethodHandle, which is called its target.
ConstantCallSite~java.lang.invoke.ConstantCallSite~java/lang/invoke/ConstantCallSite.html~A ConstantCallSite is a CallSite whose target is permanent, and can never be changed.
LambdaMetafactory~java.lang.invoke.LambdaMetafactory~java/lang/invoke/LambdaMetafactory.html~Methods to facilitate the creation of simple "function objects" that implement one or more interfaces by delegation to a provided MethodHandle, possibly after type adaptation and partial evaluation of arguments.
MethodHandle~java.lang.invoke.MethodHandle~java/lang/invoke/MethodHandle.html~A method handle is a typed, directly executable reference to an underlying method, constructor, field, or similar low-level operation, with optional transformations of arguments or return values.
MethodHandleProxies~java.lang.invoke.MethodHandleProxies~java/lang/invoke/MethodHandleProxies.html~This class consists exclusively of static methods that help adapt method handles to other JVM types, such as interfaces.
MethodHandles~java.lang.invoke.MethodHandles~java/lang/invoke/MethodHandles.html~This class consists exclusively of static methods that operate on or return method handles.
MethodHandles.Lookup~java.lang.invoke.MethodHandles.Lookup~java/lang/invoke/MethodHandles.Lookup.html~A lookup object is a factory for creating method handles, when the creation requires access checking.
MethodType~java.lang.invoke.MethodType~java/lang/invoke/MethodType.html~A method type represents the arguments and return type accepted and returned by a method handle, or the arguments and return type passed and expected  by a method handle caller.
MutableCallSite~java.lang.invoke.MutableCallSite~java/lang/invoke/MutableCallSite.html~A MutableCallSite is a CallSite whose target variable behaves like an ordinary field.
SerializedLambda~java.lang.invoke.SerializedLambda~java/lang/invoke/SerializedLambda.html~Serialized form of a lambda expression.
SwitchPoint~java.lang.invoke.SwitchPoint~java/lang/invoke/SwitchPoint.html~A SwitchPoint is an object which can publish state transitions to other threads.
VolatileCallSite~java.lang.invoke.VolatileCallSite~java/lang/invoke/VolatileCallSite.html~A VolatileCallSite is a CallSite whose target acts like a volatile variable.
PhantomReference~java.lang.ref.PhantomReference~java/lang/ref/PhantomReference.html~Phantom reference objects, which are enqueued after the collector determines that their referents may otherwise be reclaimed.
Reference~java.lang.ref.Reference~java/lang/ref/Reference.html~Abstract base class for reference objects.
ReferenceQueue~java.lang.ref.ReferenceQueue~java/lang/ref/ReferenceQueue.html~Reference queues, to which registered reference objects are appended by the garbage collector after the appropriate reachability changes are detected.
SoftReference~java.lang.ref.SoftReference~java/lang/ref/SoftReference.html~Soft reference objects, which are cleared at the discretion of the garbage collector in response to memory demand.
WeakReference~java.lang.ref.WeakReference~java/lang/ref/WeakReference.html~Weak reference objects, which do not prevent their referents from being made finalizable, finalized, and then reclaimed.
AccessibleObject~java.lang.reflect.AccessibleObject~java/lang/reflect/AccessibleObject.html~The AccessibleObject class is the base class for Field, Method and Constructor objects.
Array~java.lang.reflect.Array~java/lang/reflect/Array.html~The Array class provides static methods to dynamically create and access Java arrays.
Constructor~java.lang.reflect.Constructor~java/lang/reflect/Constructor.html~Constructor provides information about, and access to, a single constructor for a class.
Executable~java.lang.reflect.Executable~java/lang/reflect/Executable.html~A shared superclass for the common functionality of Method and Constructor.
Field~java.lang.reflect.Field~java/lang/reflect/Field.html~A Field provides information about, and dynamic access to, a single field of a class or an interface.
Method~java.lang.reflect.Method~java/lang/reflect/Method.html~A Method provides information about, and access to, a single method on a class or interface.
Modifier~java.lang.reflect.Modifier~java/lang/reflect/Modifier.html~The Modifier class provides static methods and constants to decode class and member access modifiers.
Parameter~java.lang.reflect.Parameter~java/lang/reflect/Parameter.html~Information about method parameters.
Proxy~java.lang.reflect.Proxy~java/lang/reflect/Proxy.html~Proxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all dynamic proxy classes created by those methods.
ReflectPermission~java.lang.reflect.ReflectPermission~java/lang/reflect/ReflectPermission.html~The Permission class for reflective operations.
BigDecimal~java.math.BigDecimal~java/math/BigDecimal.html~Immutable, arbitrary-precision signed decimal numbers.
BigInteger~java.math.BigInteger~java/math/BigInteger.html~Immutable arbitrary-precision integers.
MathContext~java.math.MathContext~java/math/MathContext.html~Immutable objects which encapsulate the context settings which describe certain rules for numerical operators, such as those implemented by the BigDecimal class.
Authenticator~java.net.Authenticator~java/net/Authenticator.html~The class Authenticator represents an object that knows how to obtain authentication for a network connection.
CacheRequest~java.net.CacheRequest~java/net/CacheRequest.html~Represents channels for storing resources in the ResponseCache.
CacheResponse~java.net.CacheResponse~java/net/CacheResponse.html~Represent channels for retrieving resources from the ResponseCache.
ContentHandler~java.net.ContentHandler~java/net/ContentHandler.html~The abstract class ContentHandler is the superclass of all classes that read an Object from a URLConnection.
CookieHandler~java.net.CookieHandler~java/net/CookieHandler.html~A CookieHandler object provides a callback mechanism to hook up a HTTP state management policy implementation into the HTTP protocol handler.
CookieManager~java.net.CookieManager~java/net/CookieManager.html~CookieManager provides a concrete implementation of CookieHandler, which separates the storage of cookies from the policy surrounding accepting and rejecting cookies.
DatagramPacket~java.net.DatagramPacket~java/net/DatagramPacket.html~This class represents a datagram packet.
DatagramSocket~java.net.DatagramSocket~java/net/DatagramSocket.html~This class represents a socket for sending and receiving datagram packets.
DatagramSocketImpl~java.net.DatagramSocketImpl~java/net/DatagramSocketImpl.html~Abstract datagram and multicast socket implementation base class.
HttpCookie~java.net.HttpCookie~java/net/HttpCookie.html~An HttpCookie object represents an HTTP cookie, which carries state information between server and user agent.
HttpURLConnection~java.net.HttpURLConnection~java/net/HttpURLConnection.html~A URLConnection with support for HTTP-specific features.
IDN~java.net.IDN~java/net/IDN.html~Provides methods to convert internationalized domain names (IDNs) between a normal Unicode representation and an ASCII Compatible Encoding (ACE) representation.
Inet4Address~java.net.Inet4Address~java/net/Inet4Address.html~This class represents an Internet Protocol version 4 (IPv4) address.
Inet6Address~java.net.Inet6Address~java/net/Inet6Address.html~This class represents an Internet Protocol version 6 (IPv6) address.
InetAddress~java.net.InetAddress~java/net/InetAddress.html~This class represents an Internet Protocol (IP) address.
InetSocketAddress~java.net.InetSocketAddress~java/net/InetSocketAddress.html~This class implements an IP Socket Address (IP address + port number) It can also be a pair (hostname + port number), in which case an attempt will be made to resolve the hostname.
InterfaceAddress~java.net.InterfaceAddress~java/net/InterfaceAddress.html~This class represents a Network Interface address.
JarURLConnection~java.net.JarURLConnection~java/net/JarURLConnection.html~A URL Connection to a Java ARchive (JAR) file or an entry in a JAR file.
MulticastSocket~java.net.MulticastSocket~java/net/MulticastSocket.html~The multicast datagram socket class is useful for sending and receiving IP multicast packets.
NetPermission~java.net.NetPermission~java/net/NetPermission.html~This class is for various network permissions.
NetworkInterface~java.net.NetworkInterface~java/net/NetworkInterface.html~This class represents a Network Interface made up of a name, and a list of IP addresses assigned to this interface.
PasswordAuthentication~java.net.PasswordAuthentication~java/net/PasswordAuthentication.html~The class PasswordAuthentication is a data holder that is used by Authenticator.
Proxy~java.net.Proxy~java/net/Proxy.html~This class represents a proxy setting, typically a type (http, socks) and a socket address.
ProxySelector~java.net.ProxySelector~java/net/ProxySelector.html~Selects the proxy server to use, if any, when connecting to the network resource referenced by a URL.
ResponseCache~java.net.ResponseCache~java/net/ResponseCache.html~Represents implementations of URLConnection caches.
SecureCacheResponse~java.net.SecureCacheResponse~java/net/SecureCacheResponse.html~Represents a cache response originally retrieved through secure means, such as TLS.
ServerSocket~java.net.ServerSocket~java/net/ServerSocket.html~This class implements server sockets.
Socket~java.net.Socket~java/net/Socket.html~This class implements client sockets (also called just "sockets").
SocketAddress~java.net.SocketAddress~java/net/SocketAddress.html~This class represents a Socket Address with no protocol attachment.
SocketImpl~java.net.SocketImpl~java/net/SocketImpl.html~The abstract class SocketImpl is a common superclass of all classes that actually implement sockets.
SocketPermission~java.net.SocketPermission~java/net/SocketPermission.html~This class represents access to a network via sockets.
StandardSocketOptions~java.net.StandardSocketOptions~java/net/StandardSocketOptions.html~Defines the standard socket options.
URI~java.net.URI~java/net/URI.html~Represents a Uniform Resource Identifier (URI) reference.
URL~java.net.URL~java/net/URL.html~Class URL represents a Uniform Resource Locator, a pointer to a "resource" on the World Wide Web.
URLClassLoader~java.net.URLClassLoader~java/net/URLClassLoader.html~This class loader is used to load classes and resources from a search path of URLs referring to both JAR files and directories.
URLConnection~java.net.URLConnection~java/net/URLConnection.html~The abstract class URLConnection is the superclass of all classes that represent a communications link between the application and a URL.
URLDecoder~java.net.URLDecoder~java/net/URLDecoder.html~Utility class for HTML form decoding.
URLEncoder~java.net.URLEncoder~java/net/URLEncoder.html~Utility class for HTML form encoding.
URLPermission~java.net.URLPermission~java/net/URLPermission.html~Represents permission to access a resource or set of resources defined by a given url, and for a given set of user-settable request methods and request headers.
URLStreamHandler~java.net.URLStreamHandler~java/net/URLStreamHandler.html~The abstract class URLStreamHandler is the common superclass for all stream protocol handlers.
Buffer~java.nio.Buffer~java/nio/Buffer.html~A container for data of a specific primitive type.
ByteBuffer~java.nio.ByteBuffer~java/nio/ByteBuffer.html~A byte buffer.
ByteOrder~java.nio.ByteOrder~java/nio/ByteOrder.html~A typesafe enumeration for byte orders.
CharBuffer~java.nio.CharBuffer~java/nio/CharBuffer.html~A char buffer.
DoubleBuffer~java.nio.DoubleBuffer~java/nio/DoubleBuffer.html~A double buffer.
FloatBuffer~java.nio.FloatBuffer~java/nio/FloatBuffer.html~A float buffer.
IntBuffer~java.nio.IntBuffer~java/nio/IntBuffer.html~An int buffer.
LongBuffer~java.nio.LongBuffer~java/nio/LongBuffer.html~A long buffer.
MappedByteBuffer~java.nio.MappedByteBuffer~java/nio/MappedByteBuffer.html~A direct byte buffer whose content is a memory-mapped region of a file.
ShortBuffer~java.nio.ShortBuffer~java/nio/ShortBuffer.html~A short buffer.
AsynchronousChannelGroup~java.nio.channels.AsynchronousChannelGroup~java/nio/channels/AsynchronousChannelGroup.html~A grouping of asynchronous channels for the purpose of resource sharing.
AsynchronousFileChannel~java.nio.channels.AsynchronousFileChannel~java/nio/channels/AsynchronousFileChannel.html~An asynchronous channel for reading, writing, and manipulating a file.
AsynchronousServerSocketChannel~java.nio.channels.AsynchronousServerSocketChannel~java/nio/channels/AsynchronousServerSocketChannel.html~An asynchronous channel for stream-oriented listening sockets.
AsynchronousSocketChannel~java.nio.channels.AsynchronousSocketChannel~java/nio/channels/AsynchronousSocketChannel.html~An asynchronous channel for stream-oriented connecting sockets.
Channels~java.nio.channels.Channels~java/nio/channels/Channels.html~Utility methods for channels and streams.
DatagramChannel~java.nio.channels.DatagramChannel~java/nio/channels/DatagramChannel.html~A selectable channel for datagram-oriented sockets.
FileChannel~java.nio.channels.FileChannel~java/nio/channels/FileChannel.html~A channel for reading, writing, mapping, and manipulating a file.
FileChannel.MapMode~java.nio.channels.FileChannel.MapMode~java/nio/channels/FileChannel.MapMode.html~A typesafe enumeration for file-mapping modes.
FileLock~java.nio.channels.FileLock~java/nio/channels/FileLock.html~A token representing a lock on a region of a file.
MembershipKey~java.nio.channels.MembershipKey~java/nio/channels/MembershipKey.html~A token representing the membership of an Internet Protocol (IP) multicast group.
Pipe~java.nio.channels.Pipe~java/nio/channels/Pipe.html~A pair of channels that implements a unidirectional pipe.
Pipe.SinkChannel~java.nio.channels.Pipe.SinkChannel~java/nio/channels/Pipe.SinkChannel.html~A channel representing the writable end of a Pipe.
Pipe.SourceChannel~java.nio.channels.Pipe.SourceChannel~java/nio/channels/Pipe.SourceChannel.html~A channel representing the readable end of a Pipe.
SelectableChannel~java.nio.channels.SelectableChannel~java/nio/channels/SelectableChannel.html~A channel that can be multiplexed via a Selector.
SelectionKey~java.nio.channels.SelectionKey~java/nio/channels/SelectionKey.html~A token representing the registration of a SelectableChannel with a Selector.
Selector~java.nio.channels.Selector~java/nio/channels/Selector.html~A multiplexor of SelectableChannel objects.
ServerSocketChannel~java.nio.channels.ServerSocketChannel~java/nio/channels/ServerSocketChannel.html~A selectable channel for stream-oriented listening sockets.
SocketChannel~java.nio.channels.SocketChannel~java/nio/channels/SocketChannel.html~A selectable channel for stream-oriented connecting sockets.
AbstractInterruptibleChannel~java.nio.channels.spi.AbstractInterruptibleChannel~java/nio/channels/spi/AbstractInterruptibleChannel.html~Base implementation class for interruptible channels.
AbstractSelectableChannel~java.nio.channels.spi.AbstractSelectableChannel~java/nio/channels/spi/AbstractSelectableChannel.html~Base implementation class for selectable channels.
AbstractSelectionKey~java.nio.channels.spi.AbstractSelectionKey~java/nio/channels/spi/AbstractSelectionKey.html~Base implementation class for selection keys.
AbstractSelector~java.nio.channels.spi.AbstractSelector~java/nio/channels/spi/AbstractSelector.html~Base implementation class for selectors.
AsynchronousChannelProvider~java.nio.channels.spi.AsynchronousChannelProvider~java/nio/channels/spi/AsynchronousChannelProvider.html~Service-provider class for asynchronous channels.
SelectorProvider~java.nio.channels.spi.SelectorProvider~java/nio/channels/spi/SelectorProvider.html~Service-provider class for selectors and selectable channels.
Charset~java.nio.charset.Charset~java/nio/charset/Charset.html~A named mapping between sequences of sixteen-bit Unicode code units and sequences of bytes.
CharsetDecoder~java.nio.charset.CharsetDecoder~java/nio/charset/CharsetDecoder.html~An engine that can transform a sequence of bytes in a specific charset into a sequence of sixteen-bit Unicode characters.
CharsetEncoder~java.nio.charset.CharsetEncoder~java/nio/charset/CharsetEncoder.html~An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of bytes in a specific charset.
CoderResult~java.nio.charset.CoderResult~java/nio/charset/CoderResult.html~A description of the result state of a coder.
CodingErrorAction~java.nio.charset.CodingErrorAction~java/nio/charset/CodingErrorAction.html~A typesafe enumeration for coding-error actions.
StandardCharsets~java.nio.charset.StandardCharsets~java/nio/charset/StandardCharsets.html~Constant definitions for the standard Charsets.
CharsetProvider~java.nio.charset.spi.CharsetProvider~java/nio/charset/spi/CharsetProvider.html~Charset service-provider class.
Files~java.nio.file.Files~java/nio/file/Files.html~This class consists exclusively of static methods that operate on files, directories, or other types of files.
FileStore~java.nio.file.FileStore~java/nio/file/FileStore.html~Storage for files.
FileSystem~java.nio.file.FileSystem~java/nio/file/FileSystem.html~Provides an interface to a file system and is the factory for objects to access files and other objects in the file system.
FileSystems~java.nio.file.FileSystems~java/nio/file/FileSystems.html~Factory methods for file systems.
LinkPermission~java.nio.file.LinkPermission~java/nio/file/LinkPermission.html~The Permission class for link creation operations.
Paths~java.nio.file.Paths~java/nio/file/Paths.html~This class consists exclusively of static methods that return a Path by converting a path string or URI.
SimpleFileVisitor~java.nio.file.SimpleFileVisitor~java/nio/file/SimpleFileVisitor.html~A simple visitor of files with default behavior to visit all files and to re-throw I/O errors.
StandardWatchEventKinds~java.nio.file.StandardWatchEventKinds~java/nio/file/StandardWatchEventKinds.html~Defines the standard event kinds.
AclEntry~java.nio.file.attribute.AclEntry~java/nio/file/attribute/AclEntry.html~An entry in an access control list (ACL).
AclEntry.Builder~java.nio.file.attribute.AclEntry.Builder~java/nio/file/attribute/AclEntry.Builder.html~A builder of AclEntry objects.
FileTime~java.nio.file.attribute.FileTime~java/nio/file/attribute/FileTime.html~Represents the value of a file's time stamp attribute.
PosixFilePermissions~java.nio.file.attribute.PosixFilePermissions~java/nio/file/attribute/PosixFilePermissions.html~This class consists exclusively of static methods that operate on sets of PosixFilePermission objects.
UserPrincipalLookupService~java.nio.file.attribute.UserPrincipalLookupService~java/nio/file/attribute/UserPrincipalLookupService.html~An object to lookup user and group principals by name.
FileSystemProvider~java.nio.file.spi.FileSystemProvider~java/nio/file/spi/FileSystemProvider.html~Service-provider class for file systems.
FileTypeDetector~java.nio.file.spi.FileTypeDetector~java/nio/file/spi/FileTypeDetector.html~A file type detector for probing a file to guess its file type.
AccessControlContext~java.security.AccessControlContext~java/security/AccessControlContext.html~An AccessControlContext is used to make system resource access decisions based on the context it encapsulates.
AccessController~java.security.AccessController~java/security/AccessController.html~The AccessController class is used for access control operations and decisions.
AlgorithmParameterGenerator~java.security.AlgorithmParameterGenerator~java/security/AlgorithmParameterGenerator.html~The AlgorithmParameterGenerator class is used to generate a set of parameters to be used with a certain algorithm.
AlgorithmParameterGeneratorSpi~java.security.AlgorithmParameterGeneratorSpi~java/security/AlgorithmParameterGeneratorSpi.html~This class defines the Service Provider Interface (SPI) for the AlgorithmParameterGenerator class, which is used to generate a set of parameters to be used with a certain algorithm.
AlgorithmParameters~java.security.AlgorithmParameters~java/security/AlgorithmParameters.html~This class is used as an opaque representation of cryptographic parameters.
AlgorithmParametersSpi~java.security.AlgorithmParametersSpi~java/security/AlgorithmParametersSpi.html~This class defines the Service Provider Interface (SPI) for the AlgorithmParameters class, which is used to manage algorithm parameters.
AllPermission~java.security.AllPermission~java/security/AllPermission.html~The AllPermission is a permission that implies all other permissions.
AuthProvider~java.security.AuthProvider~java/security/AuthProvider.html~This class defines login and logout methods for a provider.
BasicPermission~java.security.BasicPermission~java/security/BasicPermission.html~The BasicPermission class extends the Permission class, and can be used as the base class for permissions that want to follow the same naming convention as BasicPermission.
CodeSigner~java.security.CodeSigner~java/security/CodeSigner.html~This class encapsulates information about a code signer.
CodeSource~java.security.CodeSource~java/security/CodeSource.html~This class extends the concept of a codebase to encapsulate not only the location (URL) but also the certificate chains that were used to verify signed code originating from that location.
DigestInputStream~java.security.DigestInputStream~java/security/DigestInputStream.html~A transparent stream that updates the associated message digest using the bits going through the stream.
DigestOutputStream~java.security.DigestOutputStream~java/security/DigestOutputStream.html~A transparent stream that updates the associated message digest using the bits going through the stream.
DomainLoadStoreParameter~java.security.DomainLoadStoreParameter~java/security/DomainLoadStoreParameter.html~Configuration data that specifies the keystores in a keystore domain.
GuardedObject~java.security.GuardedObject~java/security/GuardedObject.html~A GuardedObject is an object that is used to protect access to another object.
Identity~java.security.Identity~java/security/Identity.html~Deprecated This class is no longer used.
IdentityScope~java.security.IdentityScope~java/security/IdentityScope.html~Deprecated This class is no longer used.
KeyFactory~java.security.KeyFactory~java/security/KeyFactory.html~Key factories are used to convert keys (opaque cryptographic keys of type Key) into key specifications (transparent representations of the underlying key material), and vice versa.
KeyFactorySpi~java.security.KeyFactorySpi~java/security/KeyFactorySpi.html~This class defines the Service Provider Interface (SPI) for the KeyFactory class.
KeyPair~java.security.KeyPair~java/security/KeyPair.html~This class is a simple holder for a key pair (a public key and a private key).
KeyPairGenerator~java.security.KeyPairGenerator~java/security/KeyPairGenerator.html~The KeyPairGenerator class is used to generate pairs of public and private keys.
KeyPairGeneratorSpi~java.security.KeyPairGeneratorSpi~java/security/KeyPairGeneratorSpi.html~This class defines the Service Provider Interface (SPI) for the KeyPairGenerator class, which is used to generate pairs of public and private keys.
KeyRep~java.security.KeyRep~java/security/KeyRep.html~Standardized representation for serialized Key objects.
KeyStore~java.security.KeyStore~java/security/KeyStore.html~This class represents a storage facility for cryptographic keys and certificates.
KeyStore.Builder~java.security.KeyStore.Builder~java/security/KeyStore.Builder.html~A description of a to-be-instantiated KeyStore object.
KeyStore.CallbackHandlerProtection~java.security.KeyStore.CallbackHandlerProtection~java/security/KeyStore.CallbackHandlerProtection.html~A ProtectionParameter encapsulating a CallbackHandler.
KeyStore.PasswordProtection~java.security.KeyStore.PasswordProtection~java/security/KeyStore.PasswordProtection.html~A password-based implementation of ProtectionParameter.
KeyStore.PrivateKeyEntry~java.security.KeyStore.PrivateKeyEntry~java/security/KeyStore.PrivateKeyEntry.html~A KeyStore entry that holds a PrivateKey and corresponding certificate chain.
KeyStore.SecretKeyEntry~java.security.KeyStore.SecretKeyEntry~java/security/KeyStore.SecretKeyEntry.html~A KeyStore entry that holds a SecretKey.
KeyStore.TrustedCertificateEntry~java.security.KeyStore.TrustedCertificateEntry~java/security/KeyStore.TrustedCertificateEntry.html~A KeyStore entry that holds a trusted Certificate.
KeyStoreSpi~java.security.KeyStoreSpi~java/security/KeyStoreSpi.html~This class defines the Service Provider Interface (SPI) for the KeyStore class.
MessageDigest~java.security.MessageDigest~java/security/MessageDigest.html~This MessageDigest class provides applications the functionality of a message digest algorithm, such as SHA-1 or SHA-256.
MessageDigestSpi~java.security.MessageDigestSpi~java/security/MessageDigestSpi.html~This class defines the Service Provider Interface (SPI) for the MessageDigest class, which provides the functionality of a message digest algorithm, such as MD5 or SHA.
Permission~java.security.Permission~java/security/Permission.html~Abstract class for representing access to a system resource.
PermissionCollection~java.security.PermissionCollection~java/security/PermissionCollection.html~Abstract class representing a collection of Permission objects.
Permissions~java.security.Permissions~java/security/Permissions.html~This class represents a heterogeneous collection of Permissions.
PKCS12Attribute~java.security.PKCS12Attribute~java/security/PKCS12Attribute.html~An attribute associated with a PKCS12 keystore entry.
Policy~java.security.Policy~java/security/Policy.html~A Policy object is responsible for determining whether code executing in the Java runtime environment has permission to perform a security-sensitive operation.
PolicySpi~java.security.PolicySpi~java/security/PolicySpi.html~This class defines the Service Provider Interface (SPI) for the Policy class.
ProtectionDomain~java.security.ProtectionDomain~java/security/ProtectionDomain.html~The ProtectionDomain class encapsulates the characteristics of a domain, which encloses a set of classes whose instances are granted a set of permissions when being executed on behalf of a given set of Principals.
Provider~java.security.Provider~java/security/Provider.html~This class represents a "provider" for the Java Security API, where a provider implements some or all parts of Java Security.
Provider.Service~java.security.Provider.Service~java/security/Provider.Service.html~The description of a security service.
SecureClassLoader~java.security.SecureClassLoader~java/security/SecureClassLoader.html~This class extends ClassLoader with additional support for defining classes with an associated code source and permissions which are retrieved by the system policy by default.
SecureRandom~java.security.SecureRandom~java/security/SecureRandom.html~This class provides a cryptographically strong random number generator (RNG).
SecureRandomSpi~java.security.SecureRandomSpi~java/security/SecureRandomSpi.html~This class defines the Service Provider Interface (SPI) for the SecureRandom class.
Security~java.security.Security~java/security/Security.html~This class centralizes all security properties and common security methods.
SecurityPermission~java.security.SecurityPermission~java/security/SecurityPermission.html~This class is for security permissions.
Signature~java.security.Signature~java/security/Signature.html~The Signature class is used to provide applications the functionality of a digital signature algorithm.
SignatureSpi~java.security.SignatureSpi~java/security/SignatureSpi.html~This class defines the Service Provider Interface (SPI) for the Signature class, which is used to provide the functionality of a digital signature algorithm.
SignedObject~java.security.SignedObject~java/security/SignedObject.html~SignedObject is a class for the purpose of creating authentic runtime objects whose integrity cannot be compromised without being detected.
Signer~java.security.Signer~java/security/Signer.html~Deprecated This class is no longer used.
Timestamp~java.security.Timestamp~java/security/Timestamp.html~This class encapsulates information about a signed timestamp.
UnresolvedPermission~java.security.UnresolvedPermission~java/security/UnresolvedPermission.html~The UnresolvedPermission class is used to hold Permissions that were "unresolved" when the Policy was initialized.
URIParameter~java.security.URIParameter~java/security/URIParameter.html~A parameter that contains a URI pointing to data intended for a PolicySpi or ConfigurationSpi implementation.
Certificate~java.security.cert.Certificate~java/security/cert/Certificate.html~Abstract class for managing a variety of identity certificates.
Certificate.CertificateRep~java.security.cert.Certificate.CertificateRep~java/security/cert/Certificate.CertificateRep.html~Alternate Certificate class for serialization.
CertificateFactory~java.security.cert.CertificateFactory~java/security/cert/CertificateFactory.html~This class defines the functionality of a certificate factory, which is used to generate certificate, certification path (CertPath) and certificate revocation list (CRL) objects from their encodings.
CertificateFactorySpi~java.security.cert.CertificateFactorySpi~java/security/cert/CertificateFactorySpi.html~This class defines the Service Provider Interface (SPI) for the CertificateFactory class.
CertPath~java.security.cert.CertPath~java/security/cert/CertPath.html~An immutable sequence of certificates (a certification path).
CertPath.CertPathRep~java.security.cert.CertPath.CertPathRep~java/security/cert/CertPath.CertPathRep.html~Alternate CertPath class for serialization.
CertPathBuilder~java.security.cert.CertPathBuilder~java/security/cert/CertPathBuilder.html~A class for building certification paths (also known as certificate chains).
CertPathBuilderSpi~java.security.cert.CertPathBuilderSpi~java/security/cert/CertPathBuilderSpi.html~The Service Provider Interface (SPI) for the CertPathBuilder class.
CertPathValidator~java.security.cert.CertPathValidator~java/security/cert/CertPathValidator.html~A class for validating certification paths (also known as certificate chains).
CertPathValidatorSpi~java.security.cert.CertPathValidatorSpi~java/security/cert/CertPathValidatorSpi.html~The Service Provider Interface (SPI) for the CertPathValidator class.
CertStore~java.security.cert.CertStore~java/security/cert/CertStore.html~A class for retrieving Certificates and CRLs from a repository.
CertStoreSpi~java.security.cert.CertStoreSpi~java/security/cert/CertStoreSpi.html~The Service Provider Interface (SPI) for the CertStore class.
CollectionCertStoreParameters~java.security.cert.CollectionCertStoreParameters~java/security/cert/CollectionCertStoreParameters.html~Parameters used as input for the Collection CertStore algorithm.
CRL~java.security.cert.CRL~java/security/cert/CRL.html~This class is an abstraction of certificate revocation lists (CRLs) that have different formats but important common uses.
LDAPCertStoreParameters~java.security.cert.LDAPCertStoreParameters~java/security/cert/LDAPCertStoreParameters.html~Parameters used as input for the LDAP CertStore algorithm.
PKIXBuilderParameters~java.security.cert.PKIXBuilderParameters~java/security/cert/PKIXBuilderParameters.html~Parameters used as input for the PKIX CertPathBuilder algorithm.
PKIXCertPathBuilderResult~java.security.cert.PKIXCertPathBuilderResult~java/security/cert/PKIXCertPathBuilderResult.html~This class represents the successful result of the PKIX certification path builder algorithm.
PKIXCertPathChecker~java.security.cert.PKIXCertPathChecker~java/security/cert/PKIXCertPathChecker.html~An abstract class that performs one or more checks on an X509Certificate.
PKIXCertPathValidatorResult~java.security.cert.PKIXCertPathValidatorResult~java/security/cert/PKIXCertPathValidatorResult.html~This class represents the successful result of the PKIX certification path validation algorithm.
PKIXParameters~java.security.cert.PKIXParameters~java/security/cert/PKIXParameters.html~Parameters used as input for the PKIX CertPathValidator algorithm.
PKIXRevocationChecker~java.security.cert.PKIXRevocationChecker~java/security/cert/PKIXRevocationChecker.html~A PKIXCertPathChecker for checking the revocation status of certificates with the PKIX algorithm.
PolicyQualifierInfo~java.security.cert.PolicyQualifierInfo~java/security/cert/PolicyQualifierInfo.html~An immutable policy qualifier represented by the ASN.1 PolicyQualifierInfo structure.
TrustAnchor~java.security.cert.TrustAnchor~java/security/cert/TrustAnchor.html~A trust anchor or most-trusted Certification Authority (CA).
X509Certificate~java.security.cert.X509Certificate~java/security/cert/X509Certificate.html~Abstract class for X.509 certificates.
X509CertSelector~java.security.cert.X509CertSelector~java/security/cert/X509CertSelector.html~A CertSelector that selects X509Certificates that match all specified criteria.
X509CRL~java.security.cert.X509CRL~java/security/cert/X509CRL.html~Abstract class for an X.509 Certificate Revocation List (CRL).
X509CRLEntry~java.security.cert.X509CRLEntry~java/security/cert/X509CRLEntry.html~Abstract class for a revoked certificate in a CRL (Certificate Revocation List).
X509CRLSelector~java.security.cert.X509CRLSelector~java/security/cert/X509CRLSelector.html~A CRLSelector that selects X509CRLs that match all specified criteria.
DSAGenParameterSpec~java.security.spec.DSAGenParameterSpec~java/security/spec/DSAGenParameterSpec.html~This immutable class specifies the set of parameters used for generating DSA parameters as specified in FIPS 186-3 Digital Signature Standard (DSS).
DSAParameterSpec~java.security.spec.DSAParameterSpec~java/security/spec/DSAParameterSpec.html~This class specifies the set of parameters used with the DSA algorithm.
DSAPrivateKeySpec~java.security.spec.DSAPrivateKeySpec~java/security/spec/DSAPrivateKeySpec.html~This class specifies a DSA private key with its associated parameters.
DSAPublicKeySpec~java.security.spec.DSAPublicKeySpec~java/security/spec/DSAPublicKeySpec.html~This class specifies a DSA public key with its associated parameters.
ECFieldF2m~java.security.spec.ECFieldF2m~java/security/spec/ECFieldF2m.html~This immutable class defines an elliptic curve (EC) characteristic 2 finite field.
ECFieldFp~java.security.spec.ECFieldFp~java/security/spec/ECFieldFp.html~This immutable class defines an elliptic curve (EC) prime finite field.
ECGenParameterSpec~java.security.spec.ECGenParameterSpec~java/security/spec/ECGenParameterSpec.html~This immutable class specifies the set of parameters used for generating elliptic curve (EC) domain parameters.
ECParameterSpec~java.security.spec.ECParameterSpec~java/security/spec/ECParameterSpec.html~This immutable class specifies the set of domain parameters used with elliptic curve cryptography (ECC).
ECPoint~java.security.spec.ECPoint~java/security/spec/ECPoint.html~This immutable class represents a point on an elliptic curve (EC) in affine coordinates.
ECPrivateKeySpec~java.security.spec.ECPrivateKeySpec~java/security/spec/ECPrivateKeySpec.html~This immutable class specifies an elliptic curve private key with its associated parameters.
ECPublicKeySpec~java.security.spec.ECPublicKeySpec~java/security/spec/ECPublicKeySpec.html~This immutable class specifies an elliptic curve public key with its associated parameters.
EllipticCurve~java.security.spec.EllipticCurve~java/security/spec/EllipticCurve.html~This immutable class holds the necessary values needed to represent an elliptic curve.
EncodedKeySpec~java.security.spec.EncodedKeySpec~java/security/spec/EncodedKeySpec.html~This class represents a public or private key in encoded format.
MGF1ParameterSpec~java.security.spec.MGF1ParameterSpec~java/security/spec/MGF1ParameterSpec.html~This class specifies the set of parameters used with mask generation function MGF1 in OAEP Padding and RSA-PSS signature scheme, as defined in the PKCS #1 v2.1 standard.
PKCS8EncodedKeySpec~java.security.spec.PKCS8EncodedKeySpec~java/security/spec/PKCS8EncodedKeySpec.html~This class represents the ASN.1 encoding of a private key, encoded according to the ASN.1 type PrivateKeyInfo.
PSSParameterSpec~java.security.spec.PSSParameterSpec~java/security/spec/PSSParameterSpec.html~This class specifies a parameter spec for RSA-PSS signature scheme, as defined in the PKCS#1 v2.1 standard.
RSAKeyGenParameterSpec~java.security.spec.RSAKeyGenParameterSpec~java/security/spec/RSAKeyGenParameterSpec.html~This class specifies the set of parameters used to generate an RSA key pair.
RSAMultiPrimePrivateCrtKeySpec~java.security.spec.RSAMultiPrimePrivateCrtKeySpec~java/security/spec/RSAMultiPrimePrivateCrtKeySpec.html~This class specifies an RSA multi-prime private key, as defined in the PKCS#1 v2.1, using the Chinese Remainder Theorem (CRT) information values for efficiency.
RSAOtherPrimeInfo~java.security.spec.RSAOtherPrimeInfo~java/security/spec/RSAOtherPrimeInfo.html~This class represents the triplet (prime, exponent, and coefficient) inside RSA's OtherPrimeInfo structure, as defined in the PKCS#1 v2.1.
RSAPrivateCrtKeySpec~java.security.spec.RSAPrivateCrtKeySpec~java/security/spec/RSAPrivateCrtKeySpec.html~This class specifies an RSA private key, as defined in the PKCS#1 standard, using the Chinese Remainder Theorem (CRT) information values for efficiency.
RSAPrivateKeySpec~java.security.spec.RSAPrivateKeySpec~java/security/spec/RSAPrivateKeySpec.html~This class specifies an RSA private key.
RSAPublicKeySpec~java.security.spec.RSAPublicKeySpec~java/security/spec/RSAPublicKeySpec.html~This class specifies an RSA public key.
X509EncodedKeySpec~java.security.spec.X509EncodedKeySpec~java/security/spec/X509EncodedKeySpec.html~This class represents the ASN.1 encoding of a public key, encoded according to the ASN.1 type SubjectPublicKeyInfo.
Annotation~java.text.Annotation~java/text/Annotation.html~An Annotation object is used as a wrapper for a text attribute value if the attribute has annotation characteristics.
AttributedCharacterIterator.Attribute~java.text.AttributedCharacterIterator.Attribute~java/text/AttributedCharacterIterator.Attribute.html~Defines attribute keys that are used to identify text attributes.
AttributedString~java.text.AttributedString~java/text/AttributedString.html~An AttributedString holds text and related attribute information.
Bidi~java.text.Bidi~java/text/Bidi.html~This class implements the Unicode Bidirectional Algorithm.
BreakIterator~java.text.BreakIterator~java/text/BreakIterator.html~The BreakIterator class implements methods for finding the location of boundaries in text.
ChoiceFormat~java.text.ChoiceFormat~java/text/ChoiceFormat.html~A ChoiceFormat allows you to attach a format to a range of numbers.
CollationElementIterator~java.text.CollationElementIterator~java/text/CollationElementIterator.html~The CollationElementIterator class is used as an iterator to walk through each character of an international string.
CollationKey~java.text.CollationKey~java/text/CollationKey.html~A CollationKey represents a String under the rules of a specific Collator object.
Collator~java.text.Collator~java/text/Collator.html~The Collator class performs locale-sensitive String comparison.
DateFormat~java.text.DateFormat~java/text/DateFormat.html~DateFormat is an abstract class for date/time formatting subclasses which formats and parses dates or time in a language-independent manner.
DateFormat.Field~java.text.DateFormat.Field~java/text/DateFormat.Field.html~Defines constants that are used as attribute keys in the AttributedCharacterIterator returned from DateFormat.formatToCharacterIterator and as field identifiers in FieldPosition.
DateFormatSymbols~java.text.DateFormatSymbols~java/text/DateFormatSymbols.html~DateFormatSymbols is a public class for encapsulating localizable date-time formatting data, such as the names of the months, the names of the days of the week, and the time zone data.
DecimalFormat~java.text.DecimalFormat~java/text/DecimalFormat.html~DecimalFormat is a concrete subclass of NumberFormat that formats decimal numbers.
DecimalFormatSymbols~java.text.DecimalFormatSymbols~java/text/DecimalFormatSymbols.html~This class represents the set of symbols (such as the decimal separator, the grouping separator, and so on) needed by DecimalFormat to format numbers.
FieldPosition~java.text.FieldPosition~java/text/FieldPosition.html~FieldPosition is a simple class used by Format and its subclasses to identify fields in formatted output.
Format~java.text.Format~java/text/Format.html~Format is an abstract base class for formatting locale-sensitive information such as dates, messages, and numbers.
Format.Field~java.text.Format.Field~java/text/Format.Field.html~Defines constants that are used as attribute keys in the AttributedCharacterIterator returned from Format.formatToCharacterIterator and as field identifiers in FieldPosition.
MessageFormat~java.text.MessageFormat~java/text/MessageFormat.html~MessageFormat provides a means to produce concatenated messages in a language-neutral way.
MessageFormat.Field~java.text.MessageFormat.Field~java/text/MessageFormat.Field.html~Defines constants that are used as attribute keys in the AttributedCharacterIterator returned from MessageFormat.formatToCharacterIterator.
Normalizer~java.text.Normalizer~java/text/Normalizer.html~This class provides the method normalize which transforms Unicode text into an equivalent composed or decomposed form, allowing for easier sorting and searching of text.
NumberFormat~java.text.NumberFormat~java/text/NumberFormat.html~NumberFormat is the abstract base class for all number formats.
NumberFormat.Field~java.text.NumberFormat.Field~java/text/NumberFormat.Field.html~Defines constants that are used as attribute keys in the AttributedCharacterIterator returned from NumberFormat.formatToCharacterIterator and as field identifiers in FieldPosition.
ParsePosition~java.text.ParsePosition~java/text/ParsePosition.html~ParsePosition is a simple class used by Format and its subclasses to keep track of the current position during parsing.
RuleBasedCollator~java.text.RuleBasedCollator~java/text/RuleBasedCollator.html~The RuleBasedCollator class is a concrete subclass of Collator that provides a simple, data-driven, table collator.
SimpleDateFormat~java.text.SimpleDateFormat~java/text/SimpleDateFormat.html~SimpleDateFormat is a concrete class for formatting and parsing dates in a locale-sensitive manner.
StringCharacterIterator~java.text.StringCharacterIterator~java/text/StringCharacterIterator.html~StringCharacterIterator implements the CharacterIterator protocol for a String.
BreakIteratorProvider~java.text.spi.BreakIteratorProvider~java/text/spi/BreakIteratorProvider.html~An abstract class for service providers that provide concrete implementations of the BreakIterator class.
CollatorProvider~java.text.spi.CollatorProvider~java/text/spi/CollatorProvider.html~An abstract class for service providers that provide concrete implementations of the Collator class.
DateFormatProvider~java.text.spi.DateFormatProvider~java/text/spi/DateFormatProvider.html~An abstract class for service providers that provide concrete implementations of the DateFormat class.
DateFormatSymbolsProvider~java.text.spi.DateFormatSymbolsProvider~java/text/spi/DateFormatSymbolsProvider.html~An abstract class for service providers that provide instances of the DateFormatSymbols class.
DecimalFormatSymbolsProvider~java.text.spi.DecimalFormatSymbolsProvider~java/text/spi/DecimalFormatSymbolsProvider.html~An abstract class for service providers that provide instances of the DecimalFormatSymbols class.
NumberFormatProvider~java.text.spi.NumberFormatProvider~java/text/spi/NumberFormatProvider.html~An abstract class for service providers that provide concrete implementations of the NumberFormat class.
Clock~java.time.Clock~java/time/Clock.html~A clock providing access to the current instant, date and time using a time-zone.
Duration~java.time.Duration~java/time/Duration.html~A time-based amount of time, such as '34.5 seconds'.
Instant~java.time.Instant~java/time/Instant.html~An instantaneous point on the time-line.
LocalDate~java.time.LocalDate~java/time/LocalDate.html~A date without a time-zone in the ISO-8601 calendar system, such as 2007-12-03.
LocalDateTime~java.time.LocalDateTime~java/time/LocalDateTime.html~A date-time without a time-zone in the ISO-8601 calendar system, such as 2007-12-03T10:15:30.
LocalTime~java.time.LocalTime~java/time/LocalTime.html~A time without a time-zone in the ISO-8601 calendar system, such as 10:15:30.
MonthDay~java.time.MonthDay~java/time/MonthDay.html~A month-day in the ISO-8601 calendar system, such as --12-03.
OffsetDateTime~java.time.OffsetDateTime~java/time/OffsetDateTime.html~A date-time with an offset from UTC/Greenwich in the ISO-8601 calendar system, such as 2007-12-03T10:15:30+01:00.
OffsetTime~java.time.OffsetTime~java/time/OffsetTime.html~A time with an offset from UTC/Greenwich in the ISO-8601 calendar system, such as 10:15:30+01:00.
Period~java.time.Period~java/time/Period.html~A date-based amount of time in the ISO-8601 calendar system, such as '2 years, 3 months and 4 days'.
Year~java.time.Year~java/time/Year.html~A year in the ISO-8601 calendar system, such as 2007.
YearMonth~java.time.YearMonth~java/time/YearMonth.html~A year-month in the ISO-8601 calendar system, such as 2007-12.
ZonedDateTime~java.time.ZonedDateTime~java/time/ZonedDateTime.html~A date-time with a time-zone in the ISO-8601 calendar system, such as 2007-12-03T10:15:30+01:00 Europe/Paris.
ZoneId~java.time.ZoneId~java/time/ZoneId.html~A time-zone ID, such as Europe/Paris.
ZoneOffset~java.time.ZoneOffset~java/time/ZoneOffset.html~A time-zone offset from Greenwich/UTC, such as +02:00.
AbstractChronology~java.time.chrono.AbstractChronology~java/time/chrono/AbstractChronology.html~An abstract implementation of a calendar system, used to organize and identify dates.
HijrahChronology~java.time.chrono.HijrahChronology~java/time/chrono/HijrahChronology.html~The Hijrah calendar is a lunar calendar supporting Islamic calendars.
HijrahDate~java.time.chrono.HijrahDate~java/time/chrono/HijrahDate.html~A date in the Hijrah calendar system.
IsoChronology~java.time.chrono.IsoChronology~java/time/chrono/IsoChronology.html~The ISO calendar system.
JapaneseChronology~java.time.chrono.JapaneseChronology~java/time/chrono/JapaneseChronology.html~The Japanese Imperial calendar system.
JapaneseDate~java.time.chrono.JapaneseDate~java/time/chrono/JapaneseDate.html~A date in the Japanese Imperial calendar system.
JapaneseEra~java.time.chrono.JapaneseEra~java/time/chrono/JapaneseEra.html~An era in the Japanese Imperial calendar system.
MinguoChronology~java.time.chrono.MinguoChronology~java/time/chrono/MinguoChronology.html~The Minguo calendar system.
MinguoDate~java.time.chrono.MinguoDate~java/time/chrono/MinguoDate.html~A date in the Minguo calendar system.
ThaiBuddhistChronology~java.time.chrono.ThaiBuddhistChronology~java/time/chrono/ThaiBuddhistChronology.html~The Thai Buddhist calendar system.
ThaiBuddhistDate~java.time.chrono.ThaiBuddhistDate~java/time/chrono/ThaiBuddhistDate.html~A date in the Thai Buddhist calendar system.
DateTimeFormatter~java.time.format.DateTimeFormatter~java/time/format/DateTimeFormatter.html~Formatter for printing and parsing date-time objects.
DateTimeFormatterBuilder~java.time.format.DateTimeFormatterBuilder~java/time/format/DateTimeFormatterBuilder.html~Builder to create date-time formatters.
DecimalStyle~java.time.format.DecimalStyle~java/time/format/DecimalStyle.html~Localized decimal style used in date and time formatting.
IsoFields~java.time.temporal.IsoFields~java/time/temporal/IsoFields.html~Fields and units specific to the ISO-8601 calendar system, including quarter-of-year and week-based-year.
JulianFields~java.time.temporal.JulianFields~java/time/temporal/JulianFields.html~A set of date fields that provide access to Julian Days.
TemporalAdjusters~java.time.temporal.TemporalAdjusters~java/time/temporal/TemporalAdjusters.html~Common and useful TemporalAdjusters.
TemporalQueries~java.time.temporal.TemporalQueries~java/time/temporal/TemporalQueries.html~Common implementations of TemporalQuery.
ValueRange~java.time.temporal.ValueRange~java/time/temporal/ValueRange.html~The range of valid values for a date-time field.
WeekFields~java.time.temporal.WeekFields~java/time/temporal/WeekFields.html~Localized definitions of the day-of-week, week-of-month and week-of-year fields.
ZoneOffsetTransition~java.time.zone.ZoneOffsetTransition~java/time/zone/ZoneOffsetTransition.html~A transition between two offsets caused by a discontinuity in the local time-line.
ZoneOffsetTransitionRule~java.time.zone.ZoneOffsetTransitionRule~java/time/zone/ZoneOffsetTransitionRule.html~A rule expressing how to create a transition.
ZoneRules~java.time.zone.ZoneRules~java/time/zone/ZoneRules.html~The rules defining how the zone offset varies for a single time-zone.
ZoneRulesProvider~java.time.zone.ZoneRulesProvider~java/time/zone/ZoneRulesProvider.html~Provider of time-zone rules to the system.
AbstractCollection~java.util.AbstractCollection~java/util/AbstractCollection.html~This class provides a skeletal implementation of the Collection interface, to minimize the effort required to implement this interface.
AbstractList~java.util.AbstractList~java/util/AbstractList.html~This class provides a skeletal implementation of the List interface to minimize the effort required to implement this interface backed by a "random access" data store (such as an array).
AbstractMap~java.util.AbstractMap~java/util/AbstractMap.html~This class provides a skeletal implementation of the Map interface, to minimize the effort required to implement this interface.
AbstractMap.SimpleEntry~java.util.AbstractMap.SimpleEntry~java/util/AbstractMap.SimpleEntry.html~An Entry maintaining a key and a value.
AbstractMap.SimpleImmutableEntry~java.util.AbstractMap.SimpleImmutableEntry~java/util/AbstractMap.SimpleImmutableEntry.html~An Entry maintaining an immutable key and value.
AbstractQueue~java.util.AbstractQueue~java/util/AbstractQueue.html~This class provides skeletal implementations of some Queue operations.
AbstractSequentialList~java.util.AbstractSequentialList~java/util/AbstractSequentialList.html~This class provides a skeletal implementation of the List interface to minimize the effort required to implement this interface backed by a "sequential access" data store (such as a linked list).
AbstractSet~java.util.AbstractSet~java/util/AbstractSet.html~This class provides a skeletal implementation of the Set interface to minimize the effort required to implement this interface.
ArrayDeque~java.util.ArrayDeque~java/util/ArrayDeque.html~Resizable-array implementation of the Deque interface.
ArrayList~java.util.ArrayList~java/util/ArrayList.html~Resizable-array implementation of the List interface.
Arrays~java.util.Arrays~java/util/Arrays.html~This class contains various methods for manipulating arrays (such as sorting and searching).
Base64~java.util.Base64~java/util/Base64.html~This class consists exclusively of static methods for obtaining encoders and decoders for the Base64 encoding scheme.
Base64.Decoder~java.util.Base64.Decoder~java/util/Base64.Decoder.html~This class implements a decoder for decoding byte data using the Base64 encoding scheme as specified in RFC 4648 and RFC 2045.
Base64.Encoder~java.util.Base64.Encoder~java/util/Base64.Encoder.html~This class implements an encoder for encoding byte data using the Base64 encoding scheme as specified in RFC 4648 and RFC 2045.
BitSet~java.util.BitSet~java/util/BitSet.html~This class implements a vector of bits that grows as needed.
Calendar~java.util.Calendar~java/util/Calendar.html~The Calendar class is an abstract class that provides methods for converting between a specific instant in time and a set of calendar fields such as YEAR, MONTH, DAY_OF_MONTH, HOUR, and so on, and for manipulating the calendar fields, such as getting the date of the next week.
Calendar.Builder~java.util.Calendar.Builder~java/util/Calendar.Builder.html~Calendar.Builder is used for creating a Calendar from various date-time parameters.
Collections~java.util.Collections~java/util/Collections.html~This class consists exclusively of static methods that operate on or return collections.
Currency~java.util.Currency~java/util/Currency.html~Represents a currency.
Date~java.util.Date~java/util/Date.html~The class Date represents a specific instant in time, with millisecond precision.
Dictionary~java.util.Dictionary~java/util/Dictionary.html~The Dictionary class is the abstract parent of any class, such as Hashtable, which maps keys to values.
DoubleSummaryStatistics~java.util.DoubleSummaryStatistics~java/util/DoubleSummaryStatistics.html~A state object for collecting statistics such as count, min, max, sum, and average.
EnumMap~java.util.EnumMap~java/util/EnumMap.html~A specialized Map implementation for use with enum type keys.
EnumSet~java.util.EnumSet~java/util/EnumSet.html~A specialized Set implementation for use with enum types.
EventListenerProxy~java.util.EventListenerProxy~java/util/EventListenerProxy.html~An abstract wrapper class for an EventListener class which associates a set of additional parameters with the listener.
EventObject~java.util.EventObject~java/util/EventObject.html~The root class from which all event state objects shall be derived.
FormattableFlags~java.util.FormattableFlags~java/util/FormattableFlags.html~FomattableFlags are passed to the Formattable.formatTo() method and modify the output format for Formattables.
Formatter~java.util.Formatter~java/util/Formatter.html~An interpreter for printf-style format strings.
GregorianCalendar~java.util.GregorianCalendar~java/util/GregorianCalendar.html~GregorianCalendar is a concrete subclass of Calendar and provides the standard calendar system used by most of the world.
HashMap~java.util.HashMap~java/util/HashMap.html~Hash table based implementation of the Map interface.
HashSet~java.util.HashSet~java/util/HashSet.html~This class implements the Set interface, backed by a hash table (actually a HashMap instance).
Hashtable~java.util.Hashtable~java/util/Hashtable.html~This class implements a hash table, which maps keys to values.
IdentityHashMap~java.util.IdentityHashMap~java/util/IdentityHashMap.html~This class implements the Map interface with a hash table, using reference-equality in place of object-equality when comparing keys (and values).
IntSummaryStatistics~java.util.IntSummaryStatistics~java/util/IntSummaryStatistics.html~A state object for collecting statistics such as count, min, max, sum, and average.
LinkedHashMap~java.util.LinkedHashMap~java/util/LinkedHashMap.html~Hash table and linked list implementation of the Map interface, with predictable iteration order.
LinkedHashSet~java.util.LinkedHashSet~java/util/LinkedHashSet.html~Hash table and linked list implementation of the Set interface, with predictable iteration order.
LinkedList~java.util.LinkedList~java/util/LinkedList.html~Doubly-linked list implementation of the List and Deque interfaces.
ListResourceBundle~java.util.ListResourceBundle~java/util/ListResourceBundle.html~ListResourceBundle is an abstract subclass of ResourceBundle that manages resources for a locale in a convenient and easy to use list.
Locale~java.util.Locale~java/util/Locale.html~A Locale object represents a specific geographical, political, or cultural region.
Locale.Builder~java.util.Locale.Builder~java/util/Locale.Builder.html~Builder is used to build instances of Locale from values configured by the setters.
Locale.LanguageRange~java.util.Locale.LanguageRange~java/util/Locale.LanguageRange.html~This class expresses a Language Range defined in RFC 4647 Matching of Language Tags.
LongSummaryStatistics~java.util.LongSummaryStatistics~java/util/LongSummaryStatistics.html~A state object for collecting statistics such as count, min, max, sum, and average.
Objects~java.util.Objects~java/util/Objects.html~This class consists of static utility methods for operating on objects.
Observable~java.util.Observable~java/util/Observable.html~This class represents an observable object, or "data" in the model-view paradigm.
Optional~java.util.Optional~java/util/Optional.html~A container object which may or may not contain a non-null value.
OptionalDouble~java.util.OptionalDouble~java/util/OptionalDouble.html~A container object which may or may not contain a double value.
OptionalInt~java.util.OptionalInt~java/util/OptionalInt.html~A container object which may or may not contain a int value.
OptionalLong~java.util.OptionalLong~java/util/OptionalLong.html~A container object which may or may not contain a long value.
PriorityQueue~java.util.PriorityQueue~java/util/PriorityQueue.html~An unbounded priority queue based on a priority heap.
Properties~java.util.Properties~java/util/Properties.html~The Properties class represents a persistent set of properties.
PropertyPermission~java.util.PropertyPermission~java/util/PropertyPermission.html~This class is for property permissions.
PropertyResourceBundle~java.util.PropertyResourceBundle~java/util/PropertyResourceBundle.html~PropertyResourceBundle is a concrete subclass of ResourceBundle that manages resources for a locale using a set of static strings from a property file.
Random~java.util.Random~java/util/Random.html~An instance of this class is used to generate a stream of pseudorandom numbers.
ResourceBundle~java.util.ResourceBundle~java/util/ResourceBundle.html~Resource bundles contain locale-specific objects.
ResourceBundle.Control~java.util.ResourceBundle.Control~java/util/ResourceBundle.Control.html~ResourceBundle.Control defines a set of callback methods that are invoked by the ResourceBundle.getBundle factory methods during the bundle loading process.
Scanner~java.util.Scanner~java/util/Scanner.html~A simple text scanner which can parse primitive types and strings using regular expressions.
ServiceLoader~java.util.ServiceLoader~java/util/ServiceLoader.html~A simple service-provider loading facility.
SimpleTimeZone~java.util.SimpleTimeZone~java/util/SimpleTimeZone.html~SimpleTimeZone is a concrete subclass of TimeZone that represents a time zone for use with a Gregorian calendar.
Spliterators~java.util.Spliterators~java/util/Spliterators.html~Static classes and methods for operating on or creating instances of Spliterator and its primitive specializations Spliterator.OfInt, Spliterator.OfLong, and Spliterator.OfDouble.
Spliterators.AbstractDoubleSpliterator~java.util.Spliterators.AbstractDoubleSpliterator~java/util/Spliterators.AbstractDoubleSpliterator.html~An abstract Spliterator.OfDouble that implements trySplit to permit limited parallelism.
Spliterators.AbstractIntSpliterator~java.util.Spliterators.AbstractIntSpliterator~java/util/Spliterators.AbstractIntSpliterator.html~An abstract Spliterator.OfInt that implements trySplit to permit limited parallelism.
Spliterators.AbstractLongSpliterator~java.util.Spliterators.AbstractLongSpliterator~java/util/Spliterators.AbstractLongSpliterator.html~An abstract Spliterator.OfLong that implements trySplit to permit limited parallelism.
Spliterators.AbstractSpliterator~java.util.Spliterators.AbstractSpliterator~java/util/Spliterators.AbstractSpliterator.html~An abstract Spliterator that implements trySplit to permit limited parallelism.
SplittableRandom~java.util.SplittableRandom~java/util/SplittableRandom.html~A generator of uniform pseudorandom values applicable for use in (among other contexts) isolated parallel computations that may generate subtasks.
Stack~java.util.Stack~java/util/Stack.html~The Stack class represents a last-in-first-out (LIFO) stack of objects.
StringJoiner~java.util.StringJoiner~java/util/StringJoiner.html~StringJoiner is used to construct a sequence of characters separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix.
StringTokenizer~java.util.StringTokenizer~java/util/StringTokenizer.html~The string tokenizer class allows an application to break a string into tokens.
Timer~java.util.Timer~java/util/Timer.html~A facility for threads to schedule tasks for future execution in a background thread.
TimerTask~java.util.TimerTask~java/util/TimerTask.html~A task that can be scheduled for one-time or repeated execution by a Timer.
TimeZone~java.util.TimeZone~java/util/TimeZone.html~TimeZone represents a time zone offset, and also figures out daylight savings.
TreeMap~java.util.TreeMap~java/util/TreeMap.html~A Red-Black tree based NavigableMap implementation.
TreeSet~java.util.TreeSet~java/util/TreeSet.html~A NavigableSet implementation based on a TreeMap.
UUID~java.util.UUID~java/util/UUID.html~A class that represents an immutable universally unique identifier (UUID).
Vector~java.util.Vector~java/util/Vector.html~The Vector class implements a growable array of objects.
WeakHashMap~java.util.WeakHashMap~java/util/WeakHashMap.html~Hash table based implementation of the Map interface, with weak keys.
AbstractExecutorService~java.util.concurrent.AbstractExecutorService~java/util/concurrent/AbstractExecutorService.html~Provides default implementations of ExecutorService execution methods.
ArrayBlockingQueue~java.util.concurrent.ArrayBlockingQueue~java/util/concurrent/ArrayBlockingQueue.html~A bounded blocking queue backed by an array.
CompletableFuture~java.util.concurrent.CompletableFuture~java/util/concurrent/CompletableFuture.html~A Future that may be explicitly completed (setting its value and status), and may be used as a CompletionStage, supporting dependent functions and actions that trigger upon its completion.
ConcurrentHashMap~java.util.concurrent.ConcurrentHashMap~java/util/concurrent/ConcurrentHashMap.html~A hash table supporting full concurrency of retrievals and high expected concurrency for updates.
ConcurrentHashMap.KeySetView~java.util.concurrent.ConcurrentHashMap.KeySetView~java/util/concurrent/ConcurrentHashMap.KeySetView.html~A view of a ConcurrentHashMap as a Set of keys, in which additions may optionally be enabled by mapping to a common value.
ConcurrentLinkedDeque~java.util.concurrent.ConcurrentLinkedDeque~java/util/concurrent/ConcurrentLinkedDeque.html~An unbounded concurrent deque based on linked nodes.
ConcurrentLinkedQueue~java.util.concurrent.ConcurrentLinkedQueue~java/util/concurrent/ConcurrentLinkedQueue.html~An unbounded thread-safe queue based on linked nodes.
ConcurrentSkipListMap~java.util.concurrent.ConcurrentSkipListMap~java/util/concurrent/ConcurrentSkipListMap.html~A scalable concurrent ConcurrentNavigableMap implementation.
ConcurrentSkipListSet~java.util.concurrent.ConcurrentSkipListSet~java/util/concurrent/ConcurrentSkipListSet.html~A scalable concurrent NavigableSet implementation based on a ConcurrentSkipListMap.
CopyOnWriteArrayList~java.util.concurrent.CopyOnWriteArrayList~java/util/concurrent/CopyOnWriteArrayList.html~A thread-safe variant of ArrayList in which all mutative operations (add, set, and so on) are implemented by making a fresh copy of the underlying array.
CopyOnWriteArraySet~java.util.concurrent.CopyOnWriteArraySet~java/util/concurrent/CopyOnWriteArraySet.html~A Set that uses an internal CopyOnWriteArrayList for all of its operations.
CountDownLatch~java.util.concurrent.CountDownLatch~java/util/concurrent/CountDownLatch.html~A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.
CountedCompleter~java.util.concurrent.CountedCompleter~java/util/concurrent/CountedCompleter.html~A ForkJoinTask with a completion action performed when triggered and there are no remaining pending actions.
CyclicBarrier~java.util.concurrent.CyclicBarrier~java/util/concurrent/CyclicBarrier.html~A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point.
DelayQueue~java.util.concurrent.DelayQueue~java/util/concurrent/DelayQueue.html~An unbounded blocking queue of Delayed elements, in which an element can only be taken when its delay has expired.
Exchanger~java.util.concurrent.Exchanger~java/util/concurrent/Exchanger.html~A synchronization point at which threads can pair and swap elements within pairs.
ExecutorCompletionService~java.util.concurrent.ExecutorCompletionService~java/util/concurrent/ExecutorCompletionService.html~A CompletionService that uses a supplied Executor to execute tasks.
Executors~java.util.concurrent.Executors~java/util/concurrent/Executors.html~Factory and utility methods for Executor, ExecutorService, ScheduledExecutorService, ThreadFactory, and Callable classes defined in this package.
ForkJoinPool~java.util.concurrent.ForkJoinPool~java/util/concurrent/ForkJoinPool.html~An ExecutorService for running ForkJoinTasks.
ForkJoinTask~java.util.concurrent.ForkJoinTask~java/util/concurrent/ForkJoinTask.html~Abstract base class for tasks that run within a ForkJoinPool.
ForkJoinWorkerThread~java.util.concurrent.ForkJoinWorkerThread~java/util/concurrent/ForkJoinWorkerThread.html~A thread managed by a ForkJoinPool, which executes ForkJoinTasks.
FutureTask~java.util.concurrent.FutureTask~java/util/concurrent/FutureTask.html~A cancellable asynchronous computation.
LinkedBlockingDeque~java.util.concurrent.LinkedBlockingDeque~java/util/concurrent/LinkedBlockingDeque.html~An optionally-bounded blocking deque based on linked nodes.
LinkedBlockingQueue~java.util.concurrent.LinkedBlockingQueue~java/util/concurrent/LinkedBlockingQueue.html~An optionally-bounded blocking queue based on linked nodes.
LinkedTransferQueue~java.util.concurrent.LinkedTransferQueue~java/util/concurrent/LinkedTransferQueue.html~An unbounded TransferQueue based on linked nodes.
Phaser~java.util.concurrent.Phaser~java/util/concurrent/Phaser.html~CountDownLatch~java.util.concurrent.CountDownLatch~java/util/concurrent/CountDownLatch.html~A reusable synchronization barrier, similar in functionality to CyclicBarrier and but supporting more flexible usage.
PriorityBlockingQueue~java.util.concurrent.PriorityBlockingQueue~java/util/concurrent/PriorityBlockingQueue.html~An unbounded blocking queue that uses the same ordering rules as class PriorityQueue and supplies blocking retrieval operations.
RecursiveAction~java.util.concurrent.RecursiveAction~java/util/concurrent/RecursiveAction.html~A recursive resultless ForkJoinTask.
RecursiveTask~java.util.concurrent.RecursiveTask~java/util/concurrent/RecursiveTask.html~A recursive result-bearing ForkJoinTask.
ScheduledThreadPoolExecutor~java.util.concurrent.ScheduledThreadPoolExecutor~java/util/concurrent/ScheduledThreadPoolExecutor.html~A ThreadPoolExecutor that can additionally schedule commands to run after a given delay, or to execute periodically.
Semaphore~java.util.concurrent.Semaphore~java/util/concurrent/Semaphore.html~A counting semaphore.
SynchronousQueue~java.util.concurrent.SynchronousQueue~java/util/concurrent/SynchronousQueue.html~A blocking queue in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa.
ThreadLocalRandom~java.util.concurrent.ThreadLocalRandom~java/util/concurrent/ThreadLocalRandom.html~A random number generator isolated to the current thread.
ThreadPoolExecutor~java.util.concurrent.ThreadPoolExecutor~java/util/concurrent/ThreadPoolExecutor.html~An ExecutorService that executes each submitted task using one of possibly several pooled threads, normally configured using Executors factory methods.
ThreadPoolExecutor.AbortPolicy~java.util.concurrent.ThreadPoolExecutor.AbortPolicy~java/util/concurrent/ThreadPoolExecutor.AbortPolicy.html~A handler for rejected tasks that throws a RejectedExecutionException.
ThreadPoolExecutor.CallerRunsPolicy~java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy~java/util/concurrent/ThreadPoolExecutor.CallerRunsPolicy.html~A handler for rejected tasks that runs the rejected task directly in the calling thread of the execute method, unless the executor has been shut down, in which case the task is discarded.
ThreadPoolExecutor.DiscardOldestPolicy~java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy~java/util/concurrent/ThreadPoolExecutor.DiscardOldestPolicy.html~A handler for rejected tasks that discards the oldest unhandled request and then retries execute, unless the executor is shut down, in which case the task is discarded.
ThreadPoolExecutor.DiscardPolicy~java.util.concurrent.ThreadPoolExecutor.DiscardPolicy~java/util/concurrent/ThreadPoolExecutor.DiscardPolicy.html~A handler for rejected tasks that silently discards the rejected task.
AtomicBoolean~java.util.concurrent.atomic.AtomicBoolean~java/util/concurrent/atomic/AtomicBoolean.html~A boolean value that may be updated atomically.
AtomicInteger~java.util.concurrent.atomic.AtomicInteger~java/util/concurrent/atomic/AtomicInteger.html~An int value that may be updated atomically.
AtomicIntegerArray~java.util.concurrent.atomic.AtomicIntegerArray~java/util/concurrent/atomic/AtomicIntegerArray.html~An int array in which elements may be updated atomically.
AtomicIntegerFieldUpdater~java.util.concurrent.atomic.AtomicIntegerFieldUpdater~java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html~A reflection-based utility that enables atomic updates to designated volatile int fields of designated classes.
AtomicLong~java.util.concurrent.atomic.AtomicLong~java/util/concurrent/atomic/AtomicLong.html~A long value that may be updated atomically.
AtomicLongArray~java.util.concurrent.atomic.AtomicLongArray~java/util/concurrent/atomic/AtomicLongArray.html~A long array in which elements may be updated atomically.
AtomicLongFieldUpdater~java.util.concurrent.atomic.AtomicLongFieldUpdater~java/util/concurrent/atomic/AtomicLongFieldUpdater.html~A reflection-based utility that enables atomic updates to designated volatile long fields of designated classes.
AtomicMarkableReference~java.util.concurrent.atomic.AtomicMarkableReference~java/util/concurrent/atomic/AtomicMarkableReference.html~An AtomicMarkableReference maintains an object reference along with a mark bit, that can be updated atomically.
AtomicReference~java.util.concurrent.atomic.AtomicReference~java/util/concurrent/atomic/AtomicReference.html~An object reference that may be updated atomically.
AtomicReferenceArray~java.util.concurrent.atomic.AtomicReferenceArray~java/util/concurrent/atomic/AtomicReferenceArray.html~An array of object references in which elements may be updated atomically.
AtomicReferenceFieldUpdater~java.util.concurrent.atomic.AtomicReferenceFieldUpdater~java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html~A reflection-based utility that enables atomic updates to designated volatile reference fields of designated classes.
AtomicStampedReference~java.util.concurrent.atomic.AtomicStampedReference~java/util/concurrent/atomic/AtomicStampedReference.html~An AtomicStampedReference maintains an object reference along with an integer "stamp", that can be updated atomically.
DoubleAccumulator~java.util.concurrent.atomic.DoubleAccumulator~java/util/concurrent/atomic/DoubleAccumulator.html~One or more variables that together maintain a running double value updated using a supplied function.
DoubleAdder~java.util.concurrent.atomic.DoubleAdder~java/util/concurrent/atomic/DoubleAdder.html~One or more variables that together maintain an initially zero double sum.
LongAccumulator~java.util.concurrent.atomic.LongAccumulator~java/util/concurrent/atomic/LongAccumulator.html~One or more variables that together maintain a running long value updated using a supplied function.
LongAdder~java.util.concurrent.atomic.LongAdder~java/util/concurrent/atomic/LongAdder.html~One or more variables that together maintain an initially zero long sum.
AbstractOwnableSynchronizer~java.util.concurrent.locks.AbstractOwnableSynchronizer~java/util/concurrent/locks/AbstractOwnableSynchronizer.html~A synchronizer that may be exclusively owned by a thread.
AbstractQueuedLongSynchronizer~java.util.concurrent.locks.AbstractQueuedLongSynchronizer~java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html~A version of AbstractQueuedSynchronizer in which synchronization state is maintained as a long.
AbstractQueuedSynchronizer~java.util.concurrent.locks.AbstractQueuedSynchronizer~java/util/concurrent/locks/AbstractQueuedSynchronizer.html~Provides a framework for implementing blocking locks and related synchronizers (semaphores, events, etc) that rely on first-in-first-out (FIFO) wait queues.
LockSupport~java.util.concurrent.locks.LockSupport~java/util/concurrent/locks/LockSupport.html~Basic thread blocking primitives for creating locks and other synchronization classes.
ReentrantLock~java.util.concurrent.locks.ReentrantLock~java/util/concurrent/locks/ReentrantLock.html~A reentrant mutual exclusion Lock with the same basic behavior and semantics as the implicit monitor lock accessed using synchronized methods and statements, but with extended capabilities.
ReentrantReadWriteLock~java.util.concurrent.locks.ReentrantReadWriteLock~java/util/concurrent/locks/ReentrantReadWriteLock.html~An implementation of ReadWriteLock supporting similar semantics to ReentrantLock.
ReentrantReadWriteLock.ReadLock~java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock~java/util/concurrent/locks/ReentrantReadWriteLock.ReadLock.html~The lock returned by method ReentrantReadWriteLock.readLock().
ReentrantReadWriteLock.WriteLock~java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock~java/util/concurrent/locks/ReentrantReadWriteLock.WriteLock.html~The lock returned by method ReentrantReadWriteLock.writeLock().
StampedLock~java.util.concurrent.locks.StampedLock~java/util/concurrent/locks/StampedLock.html~A capability-based lock with three modes for controlling read/write access.
Attributes~java.util.jar.Attributes~java/util/jar/Attributes.html~The Attributes class maps Manifest attribute names to associated string values.
Attributes.Name~java.util.jar.Attributes.Name~java/util/jar/Attributes.Name.html~The Attributes.Name class represents an attribute name stored in this Map.
JarEntry~java.util.jar.JarEntry~java/util/jar/JarEntry.html~This class is used to represent a JAR file entry.
JarFile~java.util.jar.JarFile~java/util/jar/JarFile.html~The JarFile class is used to read the contents of a jar file from any file that can be opened with java.io.RandomAccessFile.
JarInputStream~java.util.jar.JarInputStream~java/util/jar/JarInputStream.html~The JarInputStream class is used to read the contents of a JAR file from any input stream.
JarOutputStream~java.util.jar.JarOutputStream~java/util/jar/JarOutputStream.html~The JarOutputStream class is used to write the contents of a JAR file to any output stream.
Manifest~java.util.jar.Manifest~java/util/jar/Manifest.html~The Manifest class is used to maintain Manifest entry names and their associated Attributes.
Pack200~java.util.jar.Pack200~java/util/jar/Pack200.html~Transforms a JAR file to or from a packed stream in Pack200 format.
ConsoleHandler~java.util.logging.ConsoleHandler~java/util/logging/ConsoleHandler.html~This Handler publishes log records to System.err.
ErrorManager~java.util.logging.ErrorManager~java/util/logging/ErrorManager.html~ErrorManager objects can be attached to Handlers to process any error that occurs on a Handler during Logging.
FileHandler~java.util.logging.FileHandler~java/util/logging/FileHandler.html~Simple file logging Handler.
Formatter~java.util.logging.Formatter~java/util/logging/Formatter.html~A Formatter provides support for formatting LogRecords.
Handler~java.util.logging.Handler~java/util/logging/Handler.html~A Handler object takes log messages from a Logger and exports them.
Level~java.util.logging.Level~java/util/logging/Level.html~The Level class defines a set of standard logging levels that can be used to control logging output.
Logger~java.util.logging.Logger~java/util/logging/Logger.html~A Logger object is used to log messages for a specific system or application component.
LoggingPermission~java.util.logging.LoggingPermission~java/util/logging/LoggingPermission.html~The permission which the SecurityManager will check when code that is running with a SecurityManager calls one of the logging control methods (such as Logger.setLevel).
LogManager~java.util.logging.LogManager~java/util/logging/LogManager.html~There is a single global LogManager object that is used to maintain a set of shared state about Loggers and log services.
LogRecord~java.util.logging.LogRecord~java/util/logging/LogRecord.html~LogRecord objects are used to pass logging requests between the logging framework and individual log Handlers.
MemoryHandler~java.util.logging.MemoryHandler~java/util/logging/MemoryHandler.html~Handler that buffers requests in a circular buffer in memory.
SimpleFormatter~java.util.logging.SimpleFormatter~java/util/logging/SimpleFormatter.html~Print a brief summary of the LogRecord in a human readable format.
SocketHandler~java.util.logging.SocketHandler~java/util/logging/SocketHandler.html~Simple network logging Handler.
StreamHandler~java.util.logging.StreamHandler~java/util/logging/StreamHandler.html~Stream based logging Handler.
XMLFormatter~java.util.logging.XMLFormatter~java/util/logging/XMLFormatter.html~Format a LogRecord into a standard XML format.
Matcher~java.util.regex.Matcher~java/util/regex/Matcher.html~An engine that performs match operations on a character sequence by interpreting a Pattern.
Pattern~java.util.regex.Pattern~java/util/regex/Pattern.html~A compiled representation of a regular expression.
CalendarDataProvider~java.util.spi.CalendarDataProvider~java/util/spi/CalendarDataProvider.html~An abstract class for service providers that provide locale-dependent Calendar parameters.
CalendarNameProvider~java.util.spi.CalendarNameProvider~java/util/spi/CalendarNameProvider.html~An abstract class for service providers that provide localized string representations (display names) of Calendar field values.
CurrencyNameProvider~java.util.spi.CurrencyNameProvider~java/util/spi/CurrencyNameProvider.html~An abstract class for service providers that provide localized currency symbols and display names for the Currency class.
LocaleNameProvider~java.util.spi.LocaleNameProvider~java/util/spi/LocaleNameProvider.html~An abstract class for service providers that provide localized names for the Locale class.
LocaleServiceProvider~java.util.spi.LocaleServiceProvider~java/util/spi/LocaleServiceProvider.html~This is the super class of all the locale sensitive service provider interfaces (SPIs).
TimeZoneNameProvider~java.util.spi.TimeZoneNameProvider~java/util/spi/TimeZoneNameProvider.html~An abstract class for service providers that provide localized time zone names for the TimeZone class.
Collectors~java.util.stream.Collectors~java/util/stream/Collectors.html~Implementations of Collector that implement various useful reduction operations, such as accumulating elements into collections, summarizing elements according to various criteria, etc.
StreamSupport~java.util.stream.StreamSupport~java/util/stream/StreamSupport.html~Low-level utility methods for creating and manipulating streams.
Adler32~java.util.zip.Adler32~java/util/zip/Adler32.html~A class that can be used to compute the Adler-32 checksum of a data stream.
CheckedInputStream~java.util.zip.CheckedInputStream~java/util/zip/CheckedInputStream.html~An input stream that also maintains a checksum of the data being read.
CheckedOutputStream~java.util.zip.CheckedOutputStream~java/util/zip/CheckedOutputStream.html~An output stream that also maintains a checksum of the data being written.
CRC32~java.util.zip.CRC32~java/util/zip/CRC32.html~A class that can be used to compute the CRC-32 of a data stream.
Deflater~java.util.zip.Deflater~java/util/zip/Deflater.html~This class provides support for general purpose compression using the popular ZLIB compression library.
DeflaterInputStream~java.util.zip.DeflaterInputStream~java/util/zip/DeflaterInputStream.html~Implements an input stream filter for compressing data in the "deflate" compression format.
DeflaterOutputStream~java.util.zip.DeflaterOutputStream~java/util/zip/DeflaterOutputStream.html~This class implements an output stream filter for compressing data in the "deflate" compression format.
GZIPInputStream~java.util.zip.GZIPInputStream~java/util/zip/GZIPInputStream.html~This class implements a stream filter for reading compressed data in the GZIP file format.
GZIPOutputStream~java.util.zip.GZIPOutputStream~java/util/zip/GZIPOutputStream.html~This class implements a stream filter for writing compressed data in the GZIP file format.
Inflater~java.util.zip.Inflater~java/util/zip/Inflater.html~This class provides support for general purpose decompression using the popular ZLIB compression library.
InflaterInputStream~java.util.zip.InflaterInputStream~java/util/zip/InflaterInputStream.html~This class implements a stream filter for uncompressing data in the "deflate" compression format.
InflaterOutputStream~java.util.zip.InflaterOutputStream~java/util/zip/InflaterOutputStream.html~Implements an output stream filter for uncompressing data stored in the "deflate" compression format.
ZipEntry~java.util.zip.ZipEntry~java/util/zip/ZipEntry.html~This class is used to represent a ZIP file entry.
ZipFile~java.util.zip.ZipFile~java/util/zip/ZipFile.html~This class is used to read entries from a zip file.
ZipInputStream~java.util.zip.ZipInputStream~java/util/zip/ZipInputStream.html~This class implements an input stream filter for reading files in the ZIP file format.
ZipOutputStream~java.util.zip.ZipOutputStream~java/util/zip/ZipOutputStream.html~This class implements an output stream filter for writing files in the ZIP file format.
Cipher~javax.crypto.Cipher~javax/crypto/Cipher.html~This class provides the functionality of a cryptographic cipher for encryption and decryption.
CipherInputStream~javax.crypto.CipherInputStream~javax/crypto/CipherInputStream.html~A CipherInputStream is composed of an InputStream and a Cipher so that read() methods return data that are read in from the underlying InputStream but have been additionally processed by the Cipher.
CipherOutputStream~javax.crypto.CipherOutputStream~javax/crypto/CipherOutputStream.html~A CipherOutputStream is composed of an OutputStream and a Cipher so that write() methods first process the data before writing them out to the underlying OutputStream.
CipherSpi~javax.crypto.CipherSpi~javax/crypto/CipherSpi.html~This class defines the Service Provider Interface (SPI) for the Cipher class.
EncryptedPrivateKeyInfo~javax.crypto.EncryptedPrivateKeyInfo~javax/crypto/EncryptedPrivateKeyInfo.html~This class implements the EncryptedPrivateKeyInfo type as defined in PKCS #8.
ExemptionMechanism~javax.crypto.ExemptionMechanism~javax/crypto/ExemptionMechanism.html~This class provides the functionality of an exemption mechanism, examples of which are key recovery, key weakening, and key escrow.
ExemptionMechanismSpi~javax.crypto.ExemptionMechanismSpi~javax/crypto/ExemptionMechanismSpi.html~This class defines the Service Provider Interface (SPI) for the ExemptionMechanism class.
KeyAgreement~javax.crypto.KeyAgreement~javax/crypto/KeyAgreement.html~This class provides the functionality of a key agreement (or key exchange) protocol.
KeyAgreementSpi~javax.crypto.KeyAgreementSpi~javax/crypto/KeyAgreementSpi.html~This class defines the Service Provider Interface (SPI) for the KeyAgreement class.
KeyGenerator~javax.crypto.KeyGenerator~javax/crypto/KeyGenerator.html~This class provides the functionality of a secret (symmetric) key generator.
KeyGeneratorSpi~javax.crypto.KeyGeneratorSpi~javax/crypto/KeyGeneratorSpi.html~This class defines the Service Provider Interface (SPI) for the KeyGenerator class.
Mac~javax.crypto.Mac~javax/crypto/Mac.html~This class provides the functionality of a "Message Authentication Code" (MAC) algorithm.
MacSpi~javax.crypto.MacSpi~javax/crypto/MacSpi.html~This class defines the Service Provider Interface (SPI) for the Mac class.
NullCipher~javax.crypto.NullCipher~javax/crypto/NullCipher.html~The NullCipher class is a class that provides an "identity cipher" -- one that does not transform the plain text.
SealedObject~javax.crypto.SealedObject~javax/crypto/SealedObject.html~This class enables a programmer to create an object and protect its confidentiality with a cryptographic algorithm.
SecretKeyFactory~javax.crypto.SecretKeyFactory~javax/crypto/SecretKeyFactory.html~This class represents a factory for secret keys.
SecretKeyFactorySpi~javax.crypto.SecretKeyFactorySpi~javax/crypto/SecretKeyFactorySpi.html~This class defines the Service Provider Interface (SPI) for the SecretKeyFactory class.
DESedeKeySpec~javax.crypto.spec.DESedeKeySpec~javax/crypto/spec/DESedeKeySpec.html~This class specifies a DES-EDE ("triple-DES") key.
DESKeySpec~javax.crypto.spec.DESKeySpec~javax/crypto/spec/DESKeySpec.html~This class specifies a DES key.
DHGenParameterSpec~javax.crypto.spec.DHGenParameterSpec~javax/crypto/spec/DHGenParameterSpec.html~This class specifies the set of parameters used for generating Diffie-Hellman (system) parameters for use in Diffie-Hellman key agreement.
DHParameterSpec~javax.crypto.spec.DHParameterSpec~javax/crypto/spec/DHParameterSpec.html~This class specifies the set of parameters used with the Diffie-Hellman algorithm, as specified in PKCS #3: Diffie-Hellman Key-Agreement Standard.
DHPrivateKeySpec~javax.crypto.spec.DHPrivateKeySpec~javax/crypto/spec/DHPrivateKeySpec.html~This class specifies a Diffie-Hellman private key with its associated parameters.
DHPublicKeySpec~javax.crypto.spec.DHPublicKeySpec~javax/crypto/spec/DHPublicKeySpec.html~This class specifies a Diffie-Hellman public key with its associated parameters.
GCMParameterSpec~javax.crypto.spec.GCMParameterSpec~javax/crypto/spec/GCMParameterSpec.html~Specifies the set of parameters required by a Cipher using the Galois/Counter Mode (GCM) mode.
IvParameterSpec~javax.crypto.spec.IvParameterSpec~javax/crypto/spec/IvParameterSpec.html~This class specifies an initialization vector (IV).
OAEPParameterSpec~javax.crypto.spec.OAEPParameterSpec~javax/crypto/spec/OAEPParameterSpec.html~This class specifies the set of parameters used with OAEP Padding, as defined in the PKCS #1 standard.
PBEKeySpec~javax.crypto.spec.PBEKeySpec~javax/crypto/spec/PBEKeySpec.html~A user-chosen password that can be used with password-based encryption (PBE).
PBEParameterSpec~javax.crypto.spec.PBEParameterSpec~javax/crypto/spec/PBEParameterSpec.html~This class specifies the set of parameters used with password-based encryption (PBE), as defined in the PKCS #5 standard.
PSource~javax.crypto.spec.PSource~javax/crypto/spec/PSource.html~This class specifies the source for encoding input P in OAEP Padding, as defined in the PKCS #1 standard.
PSource.PSpecified~javax.crypto.spec.PSource.PSpecified~javax/crypto/spec/PSource.PSpecified.html~This class is used to explicitly specify the value for encoding input P in OAEP Padding.
RC2ParameterSpec~javax.crypto.spec.RC2ParameterSpec~javax/crypto/spec/RC2ParameterSpec.html~This class specifies the parameters used with the RC2 algorithm.
RC5ParameterSpec~javax.crypto.spec.RC5ParameterSpec~javax/crypto/spec/RC5ParameterSpec.html~This class specifies the parameters used with the RC5 algorithm.
SecretKeySpec~javax.crypto.spec.SecretKeySpec~javax/crypto/spec/SecretKeySpec.html~This class specifies a secret key in a provider-independent fashion.
ServerSocketFactory~javax.net.ServerSocketFactory~javax/net/ServerSocketFactory.html~This class creates server sockets.
SocketFactory~javax.net.SocketFactory~javax/net/SocketFactory.html~This class creates sockets.
CertPathTrustManagerParameters~javax.net.ssl.CertPathTrustManagerParameters~javax/net/ssl/CertPathTrustManagerParameters.html~A wrapper for CertPathParameters.
ExtendedSSLSession~javax.net.ssl.ExtendedSSLSession~javax/net/ssl/ExtendedSSLSession.html~Extends the SSLSession interface to support additional session attributes.
HandshakeCompletedEvent~javax.net.ssl.HandshakeCompletedEvent~javax/net/ssl/HandshakeCompletedEvent.html~This event indicates that an SSL handshake completed on a given SSL connection.
HttpsURLConnection~javax.net.ssl.HttpsURLConnection~javax/net/ssl/HttpsURLConnection.html~HttpsURLConnection extends HttpURLConnection with support for https-specific features.
KeyManagerFactory~javax.net.ssl.KeyManagerFactory~javax/net/ssl/KeyManagerFactory.html~This class acts as a factory for key managers based on a source of key material.
KeyManagerFactorySpi~javax.net.ssl.KeyManagerFactorySpi~javax/net/ssl/KeyManagerFactorySpi.html~This class defines the Service Provider Interface (SPI) for the KeyManagerFactory class.
KeyStoreBuilderParameters~javax.net.ssl.KeyStoreBuilderParameters~javax/net/ssl/KeyStoreBuilderParameters.html~A parameters object for X509KeyManagers that encapsulates a List of KeyStore.Builders.
SNIHostName~javax.net.ssl.SNIHostName~javax/net/ssl/SNIHostName.html~Instances of this class represent a server name of type host_name in a Server Name Indication (SNI) extension.
SNIMatcher~javax.net.ssl.SNIMatcher~javax/net/ssl/SNIMatcher.html~Instances of this class represent a matcher that performs match operations on an SNIServerName instance.
SNIServerName~javax.net.ssl.SNIServerName~javax/net/ssl/SNIServerName.html~Instances of this class represent a server name in a Server Name Indication (SNI) extension.
SSLContext~javax.net.ssl.SSLContext~javax/net/ssl/SSLContext.html~Instances of this class represent a secure socket protocol implementation which acts as a factory for secure socket factories or SSLEngines.
SSLContextSpi~javax.net.ssl.SSLContextSpi~javax/net/ssl/SSLContextSpi.html~This class defines the Service Provider Interface (SPI) for the SSLContext class.
SSLEngine~javax.net.ssl.SSLEngine~javax/net/ssl/SSLEngine.html~A class which enables secure communications using protocols such as the Secure Sockets Layer (SSL) or IETF RFC 2246 "Transport Layer Security" (TLS) protocols, but is transport independent.
SSLEngineResult~javax.net.ssl.SSLEngineResult~javax/net/ssl/SSLEngineResult.html~An encapsulation of the result state produced by SSLEngine I/O calls.
SSLParameters~javax.net.ssl.SSLParameters~javax/net/ssl/SSLParameters.html~Encapsulates parameters for an SSL/TLS connection.
SSLPermission~javax.net.ssl.SSLPermission~javax/net/ssl/SSLPermission.html~This class is for various network permissions.
SSLServerSocket~javax.net.ssl.SSLServerSocket~javax/net/ssl/SSLServerSocket.html~This class extends ServerSockets and provides secure server sockets using protocols such as the Secure Sockets Layer (SSL) or Transport Layer Security (TLS) protocols.
SSLServerSocketFactory~javax.net.ssl.SSLServerSocketFactory~javax/net/ssl/SSLServerSocketFactory.html~SSLServerSocketFactorys create SSLServerSockets.
SSLSessionBindingEvent~javax.net.ssl.SSLSessionBindingEvent~javax/net/ssl/SSLSessionBindingEvent.html~This event is propagated to a SSLSessionBindingListener.
SSLSocket~javax.net.ssl.SSLSocket~javax/net/ssl/SSLSocket.html~This class extends Sockets and provides secure socket using protocols such as the "Secure Sockets Layer" (SSL) or IETF "Transport Layer Security" (TLS) protocols.
SSLSocketFactory~javax.net.ssl.SSLSocketFactory~javax/net/ssl/SSLSocketFactory.html~SSLSocketFactorys create SSLSockets.
StandardConstants~javax.net.ssl.StandardConstants~javax/net/ssl/StandardConstants.html~Standard constants definitions
TrustManagerFactory~javax.net.ssl.TrustManagerFactory~javax/net/ssl/TrustManagerFactory.html~This class acts as a factory for trust managers based on a source of trust material.
TrustManagerFactorySpi~javax.net.ssl.TrustManagerFactorySpi~javax/net/ssl/TrustManagerFactorySpi.html~This class defines the Service Provider Interface (SPI) for the TrustManagerFactory class.
X509ExtendedKeyManager~javax.net.ssl.X509ExtendedKeyManager~javax/net/ssl/X509ExtendedKeyManager.html~Abstract class that provides for extension of the X509KeyManager interface.
X509ExtendedTrustManager~javax.net.ssl.X509ExtendedTrustManager~javax/net/ssl/X509ExtendedTrustManager.html~Extensions to the X509TrustManager interface to support SSL/TLS connection sensitive trust management.
AbstractScriptEngine~javax.script.AbstractScriptEngine~javax/script/AbstractScriptEngine.html~Provides a standard implementation for several of the variants of the eval method.
CompiledScript~javax.script.CompiledScript~javax/script/CompiledScript.html~Extended by classes that store results of compilations.
ScriptEngineManager~javax.script.ScriptEngineManager~javax/script/ScriptEngineManager.html~The ScriptEngineManager implements a discovery and instantiation mechanism for ScriptEngine classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager.
SimpleBindings~javax.script.SimpleBindings~javax/script/SimpleBindings.html~A simple implementation of Bindings backed by a HashMap or some other specified Map.
SimpleScriptContext~javax.script.SimpleScriptContext~javax/script/SimpleScriptContext.html~Simple implementation of ScriptContext.
AuthPermission~javax.security.auth.AuthPermission~javax/security/auth/AuthPermission.html~This class is for authentication permissions.
Policy~javax.security.auth.Policy~javax/security/auth/Policy.html~Deprecated as of JDK version 1.4 -- Replaced by java.security.Policy.
PrivateCredentialPermission~javax.security.auth.PrivateCredentialPermission~javax/security/auth/PrivateCredentialPermission.html~This class is used to protect access to private Credentials belonging to a particular Subject.
Subject~javax.security.auth.Subject~javax/security/auth/Subject.html~A Subject represents a grouping of related information for a single entity, such as a person.
SubjectDomainCombiner~javax.security.auth.SubjectDomainCombiner~javax/security/auth/SubjectDomainCombiner.html~A SubjectDomainCombiner updates ProtectionDomains with Principals from the Subject associated with this SubjectDomainCombiner.
ChoiceCallback~javax.security.auth.callback.ChoiceCallback~javax/security/auth/callback/ChoiceCallback.html~Underlying security services instantiate and pass a ChoiceCallback to the handle method of a CallbackHandler to display a list of choices and to retrieve the selected choice(s).
ConfirmationCallback~javax.security.auth.callback.ConfirmationCallback~javax/security/auth/callback/ConfirmationCallback.html~Underlying security services instantiate and pass a ConfirmationCallback to the handle method of a CallbackHandler to ask for YES/NO, OK/CANCEL, YES/NO/CANCEL or other similar confirmations.
LanguageCallback~javax.security.auth.callback.LanguageCallback~javax/security/auth/callback/LanguageCallback.html~Underlying security services instantiate and pass a LanguageCallback to the handle method of a CallbackHandler to retrieve the Locale used for localizing text.
NameCallback~javax.security.auth.callback.NameCallback~javax/security/auth/callback/NameCallback.html~Underlying security services instantiate and pass a NameCallback to the handle method of a CallbackHandler to retrieve name information.
PasswordCallback~javax.security.auth.callback.PasswordCallback~javax/security/auth/callback/PasswordCallback.html~Underlying security services instantiate and pass a PasswordCallback to the handle method of a CallbackHandler to retrieve password information.
TextInputCallback~javax.security.auth.callback.TextInputCallback~javax/security/auth/callback/TextInputCallback.html~Underlying security services instantiate and pass a TextInputCallback to the handle method of a CallbackHandler to retrieve generic text information.
TextOutputCallback~javax.security.auth.callback.TextOutputCallback~javax/security/auth/callback/TextOutputCallback.html~Underlying security services instantiate and pass a TextOutputCallback to the handle method of a CallbackHandler to display information messages, warning messages and error messages.
AppConfigurationEntry~javax.security.auth.login.AppConfigurationEntry~javax/security/auth/login/AppConfigurationEntry.html~This class represents a single LoginModule entry configured for the application specified in the getAppConfigurationEntry(String appName) method in the Configuration class.
AppConfigurationEntry.LoginModuleControlFlag~javax.security.auth.login.AppConfigurationEntry.LoginModuleControlFlag~javax/security/auth/login/AppConfigurationEntry.LoginModuleControlFlag.html~This class represents whether or not a LoginModule is REQUIRED, REQUISITE, SUFFICIENT or OPTIONAL.
Configuration~javax.security.auth.login.Configuration~javax/security/auth/login/Configuration.html~A Configuration object is responsible for specifying which LoginModules should be used for a particular application, and in what order the LoginModules should be invoked.
ConfigurationSpi~javax.security.auth.login.ConfigurationSpi~javax/security/auth/login/ConfigurationSpi.html~This class defines the Service Provider Interface (SPI) for the Configuration class.
LoginContext~javax.security.auth.login.LoginContext~javax/security/auth/login/LoginContext.html~The LoginContext class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology.
X500Principal~javax.security.auth.x500.X500Principal~javax/security/auth/x500/X500Principal.html~This class represents an X.500 Principal.
X500PrivateCredential~javax.security.auth.x500.X500PrivateCredential~javax/security/auth/x500/X500PrivateCredential.html~This class represents an X500PrivateCredential.
Certificate~javax.security.cert.Certificate~javax/security/cert/Certificate.html~Abstract class for managing a variety of identity certificates.
X509Certificate~javax.security.cert.X509Certificate~javax/security/cert/X509Certificate.html~Abstract class for X.509 v1 certificates.